"use strict";(self.webpackChunktrainly_docs=self.webpackChunktrainly_docs||[]).push([[931],{9613:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,c(c({ref:t},s),{},{components:r})):n.createElement(f,c({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1194:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var n=r(2848),o=r(9213),a=(r(9496),r(9613)),c=["components"],i={id:"Project_Tecnologies",title:"Tecnologies"},l=void 0,u={unversionedId:"Project/Project_Tecnologies",id:"Project/Project_Tecnologies",title:"Tecnologies",description:"Firmware/Embedded",source:"@site/docs/Project/Tecnologies.md",sourceDirName:"Project",slug:"/Project/Project_Tecnologies",permalink:"/ProjectWork-DIQU-Group1-2022/docs/Project/Project_Tecnologies",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Project/Tecnologies.md",tags:[],version:"current",frontMatter:{id:"Project_Tecnologies",title:"Tecnologies"},sidebar:"tutorialSidebar",previous:{title:"Cloud",permalink:"/ProjectWork-DIQU-Group1-2022/docs/Project/Project_Cloud"}},s={},d=[{value:"Firmware/Embedded",id:"firmwareembedded",level:2},{value:"Gateway",id:"gateway",level:2},{value:"Cloud",id:"cloud",level:2},{value:"WebApp",id:"webapp",level:2}],p={toc:d};function m(e){var t=e.components,r=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"firmwareembedded"},"Firmware/Embedded"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MPLAB X IDE = used to write the code for the microntroller"),(0,a.kt)("li",{parentName:"ul"},"PICSIMLAB = used to simulate the microcontroller code"),(0,a.kt)("li",{parentName:"ul"},"ARDUINO IDE = used to write the code for the phsical electronic board")),(0,a.kt)("h2",{id:"gateway"},"Gateway"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GOLANG = used to write the entire gateway code")),(0,a.kt)("h2",{id:"cloud"},"Cloud"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"VERNEMW = used to receive message and send command. We chose to use VerneMQ because is more scalable than MosquittoMQ"),(0,a.kt)("li",{parentName:"ul"},"INFLUXDB = used to receive and store datas"),(0,a.kt)("li",{parentName:"ul"},"NODE.JS = used to write the API to receive messages from InfluxDB and send to the web app in Angular.js")),(0,a.kt)("h2",{id:"webapp"},"WebApp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ANGULAR.JS = used to write the code for the web app")))}m.isMDXComponent=!0}}]);