

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 22 17:16:52 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0019                     _TXREG	set	25
   173  000C                     _PIR1	set	12
   174  0009                     _PORTE	set	9
   175  000B                     _INTCON	set	11
   176  0018                     _RCSTA	set	24
   177  0005                     _PORTA	set	5
   178  0008                     _PORTD	set	8
   179  0009                     _PORTEbits	set	9
   180  0099                     _SPBRG	set	153
   181  008C                     _PIE1	set	140
   182  0098                     _TXSTA	set	152
   183  0089                     _TRISE	set	137
   184  0088                     _TRISD	set	136
   185  0087                     _TRISC	set	135
   186  0086                     _TRISB	set	134
   187  0085                     _TRISA	set	133
   188                           
   189                           	psect	cinit
   190  07F4                     start_initialization:	
   191                           ; #config settings
   192                           
   193  07F4                     __initialization:
   194                           
   195                           ; Clear objects allocated to BANK0
   196  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   197  07F5  1303               	bcf	3,6	;RP1=0, select bank0
   198  07F6  01B3               	clrf	__pbssBANK0& (0+127)
   199  07F7  01B4               	clrf	(__pbssBANK0+1)& (0+127)
   200  07F8  01B5               	clrf	(__pbssBANK0+2)& (0+127)
   201  07F9  01B6               	clrf	(__pbssBANK0+3)& (0+127)
   202  07FA  01B7               	clrf	(__pbssBANK0+4)& (0+127)
   203  07FB  01B8               	clrf	(__pbssBANK0+5)& (0+127)
   204  07FC                     end_of_initialization:	
   205                           ;End of C runtime variable initialization code
   206                           
   207  07FC                     __end_of__initialization:
   208  07FC  0183               	clrf	3
   209  07FD  120A  118A  2F54   	ljmp	_main	;jump to C main() function
   210                           
   211                           	psect	bssBANK0
   212  0033                     __pbssBANK0:
   213  0033                     _convInt:
   214  0033                     	ds	5
   215  0038                     _received:
   216  0038                     	ds	1
   217                           
   218                           	psect	cstackCOMMON
   219  0070                     __pcstackCOMMON:
   220  0070                     ?_init:
   221  0070                     ??_init:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_sendSerial:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ??_sendSerial:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_LCDData:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?___aldiv:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     LCDData@mode:	
   240                           ; 4 bytes @ 0x0
   241                           
   242  0070                     ___aldiv@divisor:	
   243                           ; 1 bytes @ 0x0
   244                           
   245                           
   246                           ; 4 bytes @ 0x0
   247  0070                     	ds	1
   248  0071                     ??_LCDData:
   249  0071                     sendSerial@data:	
   250                           ; 1 bytes @ 0x1
   251                           
   252                           
   253                           ; 1 bytes @ 0x1
   254  0071                     	ds	2
   255  0073                     LCDData@data:
   256                           
   257                           ; 1 bytes @ 0x3
   258  0073                     	ds	1
   259  0074                     ?_LCDPosition:
   260  0074                     LCDPosition@c:	
   261                           ; 1 bytes @ 0x4
   262                           
   263  0074                     ___aldiv@dividend:	
   264                           ; 1 bytes @ 0x4
   265                           
   266                           
   267                           ; 4 bytes @ 0x4
   268  0074                     	ds	1
   269  0075                     ??_LCDPosition:
   270  0075                     LCDPosition@r:	
   271                           ; 1 bytes @ 0x5
   272                           
   273                           
   274                           ; 1 bytes @ 0x5
   275  0075                     	ds	3
   276  0078                     ??___aldiv:
   277                           
   278                           ; 1 bytes @ 0x8
   279  0078                     	ds	1
   280  0079                     ??_initSerial:
   281                           
   282                           ; 1 bytes @ 0x9
   283  0079                     	ds	4
   284                           
   285                           	psect	cstackBANK0
   286  0020                     __pcstackBANK0:
   287  0020                     ___aldiv@counter:
   288                           
   289                           ; 1 bytes @ 0x0
   290  0020                     	ds	1
   291  0021                     ___aldiv@sign:
   292                           
   293                           ; 1 bytes @ 0x1
   294  0021                     	ds	1
   295  0022                     ___aldiv@quotient:
   296                           
   297                           ; 4 bytes @ 0x2
   298  0022                     	ds	4
   299  0026                     ?_initSerial:
   300  0026                     initSerial@baudRate:	
   301                           ; 1 bytes @ 0x6
   302                           
   303                           
   304                           ; 4 bytes @ 0x6
   305  0026                     	ds	4
   306  002A                     ??_main:
   307                           
   308                           ; 1 bytes @ 0xA
   309  002A                     	ds	3
   310  002D                     main@c:
   311                           
   312                           ; 1 bytes @ 0xD
   313  002D                     	ds	1
   314  002E                     main@a:
   315                           
   316                           ; 1 bytes @ 0xE
   317  002E                     	ds	1
   318  002F                     main@b:
   319                           
   320                           ; 1 bytes @ 0xF
   321  002F                     	ds	1
   322  0030                     main@sendDataLCD:
   323                           
   324                           ; 1 bytes @ 0x10
   325  0030                     	ds	1
   326  0031                     main@i:
   327                           
   328                           ; 2 bytes @ 0x11
   329  0031                     	ds	2
   330                           
   331                           	psect	maintext
   332  0754                     __pmaintext:	
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 59 in file "BoardTC.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;  i               2   17[BANK0 ] int 
   343 ;;  sendDataLCD     1   16[BANK0 ] unsigned char 
   344 ;;  b               1   15[BANK0 ] unsigned char 
   345 ;;  a               1   14[BANK0 ] unsigned char 
   346 ;;  c               1   13[BANK0 ] unsigned char 
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : B00/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   356 ;;      Params:         0       0       0       0       0
   357 ;;      Locals:         0       6       0       0       0
   358 ;;      Temps:          0       3       0       0       0
   359 ;;      Totals:         0       9       0       0       0
   360 ;;Total ram usage:        9 bytes
   361 ;; Hardware stack levels required when called: 2
   362 ;; This function calls:
   363 ;;		_LCDData
   364 ;;		_LCDPosition
   365 ;;		_init
   366 ;;		_initSerial
   367 ;;		_sendSerial
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           
   374                           ;psect for function _main
   375  0754                     _main:
   376  0754                     l931:	
   377                           ;incstack = 0
   378                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   379                           
   380                           
   381                           ;BoardTC.c: 60:     init();
   382  0754  120A  118A  262F  120A  118A  	fcall	_init
   383                           
   384                           ;BoardTC.c: 61:     initSerial(9600);
   385  0759  3000               	movlw	0
   386  075A  1283               	bcf	3,5	;RP0=0, select bank0
   387  075B  1303               	bcf	3,6	;RP1=0, select bank0
   388  075C  00A9               	movwf	initSerial@baudRate+3
   389  075D  3000               	movlw	0
   390  075E  00A8               	movwf	initSerial@baudRate+2
   391  075F  3025               	movlw	37
   392  0760  00A7               	movwf	initSerial@baudRate+1
   393  0761  3080               	movlw	128
   394  0762  00A6               	movwf	initSerial@baudRate
   395  0763  120A  118A  2676  120A  118A  	fcall	_initSerial
   396  0768                     l933:
   397                           
   398                           ;BoardTC.c: 63:     PORTEbits.RE0 = 1;
   399  0768  1283               	bcf	3,5	;RP0=0, select bank0
   400  0769  1303               	bcf	3,6	;RP1=0, select bank0
   401  076A  1409               	bsf	9,0	;volatile
   402  076B                     l935:
   403                           
   404                           ;BoardTC.c: 64:     int i = 0;
   405  076B  01B1               	clrf	main@i
   406  076C  01B2               	clrf	main@i+1
   407  076D                     l937:
   408                           
   409                           ;BoardTC.c: 65:     char c = 0x44;
   410  076D  3044               	movlw	68
   411  076E  00AA               	movwf	??_main
   412  076F  082A               	movf	??_main,w
   413  0770  00AD               	movwf	main@c
   414  0771                     l939:
   415                           
   416                           ;BoardTC.c: 66:     char a = 0x00;
   417  0771  01AE               	clrf	main@a
   418  0772                     l941:
   419                           
   420                           ;BoardTC.c: 67:     char b = 0xfe;
   421  0772  30FE               	movlw	254
   422  0773  00AA               	movwf	??_main
   423  0774  082A               	movf	??_main,w
   424  0775  00AF               	movwf	main@b
   425  0776                     l943:
   426                           
   427                           ;BoardTC.c: 68:     char sendDataLCD = 'giovanni';
   428  0776  3069               	movlw	105
   429  0777  00AA               	movwf	??_main
   430  0778  082A               	movf	??_main,w
   431  0779  00B0               	movwf	main@sendDataLCD
   432  077A                     l945:
   433                           
   434                           ;BoardTC.c: 70:     {;BoardTC.c: 71:         sendSerial(a);
   435  077A  1283               	bcf	3,5	;RP0=0, select bank0
   436  077B  1303               	bcf	3,6	;RP1=0, select bank0
   437  077C  082E               	movf	main@a,w
   438  077D  120A  118A  263B  120A  118A  	fcall	_sendSerial
   439                           
   440                           ;BoardTC.c: 72:         _delay((unsigned long)((1)*(8000000/4000.0)));
   441  0782  3003               	movlw	3
   442  0783  1283               	bcf	3,5	;RP0=0, select bank0
   443  0784  1303               	bcf	3,6	;RP1=0, select bank0
   444  0785  00AB               	movwf	??_main+1
   445  0786  3097               	movlw	151
   446  0787  00AA               	movwf	??_main
   447  0788                     u527:
   448  0788  0BAA               	decfsz	??_main,f
   449  0789  2F88               	goto	u527
   450  078A  0BAB               	decfsz	??_main+1,f
   451  078B  2F88               	goto	u527
   452  078C                     l947:
   453                           
   454                           ;BoardTC.c: 73:         sendSerial(b);
   455  078C  1283               	bcf	3,5	;RP0=0, select bank0
   456  078D  1303               	bcf	3,6	;RP1=0, select bank0
   457  078E  082F               	movf	main@b,w
   458  078F  120A  118A  263B  120A  118A  	fcall	_sendSerial
   459  0794                     l949:
   460                           
   461                           ;BoardTC.c: 74:         _delay((unsigned long)((1)*(8000000/4000.0)));
   462  0794  3003               	movlw	3
   463  0795  1283               	bcf	3,5	;RP0=0, select bank0
   464  0796  1303               	bcf	3,6	;RP1=0, select bank0
   465  0797  00AB               	movwf	??_main+1
   466  0798  3097               	movlw	151
   467  0799  00AA               	movwf	??_main
   468  079A                     u537:
   469  079A  0BAA               	decfsz	??_main,f
   470  079B  2F9A               	goto	u537
   471  079C  0BAB               	decfsz	??_main+1,f
   472  079D  2F9A               	goto	u537
   473                           
   474                           ;BoardTC.c: 75:         sendSerial(c);
   475  079E  1283               	bcf	3,5	;RP0=0, select bank0
   476  079F  1303               	bcf	3,6	;RP1=0, select bank0
   477  07A0  082D               	movf	main@c,w
   478  07A1  120A  118A  263B  120A  118A  	fcall	_sendSerial
   479  07A6                     l951:
   480                           
   481                           ;BoardTC.c: 77:         PORTD = 0x01 << i;
   482  07A6  3001               	movlw	1
   483  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   484  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   485  07A9  00AA               	movwf	??_main
   486  07AA  0A31               	incf	main@i,w
   487  07AB  2FAE               	goto	u304
   488  07AC                     u305:
   489  07AC  1003               	clrc
   490  07AD  0DAA               	rlf	??_main,f
   491  07AE                     u304:
   492  07AE  3EFF               	addlw	-1
   493  07AF  1D03               	skipz
   494  07B0  2FAC               	goto	u305
   495  07B1  082A               	movf	??_main,w
   496  07B2  0088               	movwf	8	;volatile
   497  07B3                     l953:
   498                           
   499                           ;BoardTC.c: 78:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   500  07B3  300B               	movlw	11
   501  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   502  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   503  07B6  00AC               	movwf	??_main+2
   504  07B7  3026               	movlw	38
   505  07B8  00AB               	movwf	??_main+1
   506  07B9  305D               	movlw	93
   507  07BA  00AA               	movwf	??_main
   508  07BB                     u547:
   509  07BB  0BAA               	decfsz	??_main,f
   510  07BC  2FBB               	goto	u547
   511  07BD  0BAB               	decfsz	??_main+1,f
   512  07BE  2FBB               	goto	u547
   513  07BF  0BAC               	decfsz	??_main+2,f
   514  07C0  2FBB               	goto	u547
   515  07C1                     l955:
   516                           
   517                           ;BoardTC.c: 80:         LCDPosition(0X80, 3);
   518  07C1  3003               	movlw	3
   519  07C2  1283               	bcf	3,5	;RP0=0, select bank0
   520  07C3  1303               	bcf	3,6	;RP1=0, select bank0
   521  07C4  00AA               	movwf	??_main
   522  07C5  082A               	movf	??_main,w
   523  07C6  00F4               	movwf	LCDPosition@c
   524  07C7  3080               	movlw	128
   525  07C8  120A  118A  2625  120A  118A  	fcall	_LCDPosition
   526  07CD                     l957:
   527                           
   528                           ;BoardTC.c: 81:         LCDData(sendDataLCD, 1);
   529  07CD  01F0               	clrf	LCDData@mode
   530  07CE  0AF0               	incf	LCDData@mode,f
   531  07CF  1283               	bcf	3,5	;RP0=0, select bank0
   532  07D0  1303               	bcf	3,6	;RP1=0, select bank0
   533  07D1  0830               	movf	main@sendDataLCD,w
   534  07D2  120A  118A  2649  120A  118A  	fcall	_LCDData
   535  07D7                     l959:
   536                           
   537                           ;BoardTC.c: 82:         i++;
   538  07D7  3001               	movlw	1
   539  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   540  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   541  07DA  07B1               	addwf	main@i,f
   542  07DB  1803               	skipnc
   543  07DC  0AB2               	incf	main@i+1,f
   544  07DD  3000               	movlw	0
   545  07DE  07B2               	addwf	main@i+1,f
   546  07DF                     l961:
   547                           
   548                           ;BoardTC.c: 87:         if(i > 7) {
   549  07DF  0832               	movf	main@i+1,w
   550  07E0  3A80               	xorlw	128
   551  07E1  00FF               	movwf	btemp+1
   552  07E2  3080               	movlw	128
   553  07E3  027F               	subwf	btemp+1,w
   554  07E4  1D03               	skipz
   555  07E5  2FE8               	goto	u315
   556  07E6  3008               	movlw	8
   557  07E7  0231               	subwf	main@i,w
   558  07E8                     u315:
   559  07E8  1C03               	skipc
   560  07E9  2FEB               	goto	u311
   561  07EA  2FEC               	goto	u310
   562  07EB                     u311:
   563  07EB  2F7A               	goto	l945
   564  07EC                     u310:
   565  07EC                     l963:
   566                           
   567                           ;BoardTC.c: 88:             i = 0;
   568  07EC  1283               	bcf	3,5	;RP0=0, select bank0
   569  07ED  1303               	bcf	3,6	;RP1=0, select bank0
   570  07EE  01B1               	clrf	main@i
   571  07EF  01B2               	clrf	main@i+1
   572  07F0  2F7A               	goto	l945
   573  07F1  120A  118A  2800   	ljmp	start
   574  07F4                     __end_of_main:
   575                           
   576                           	psect	text1
   577  063B                     __ptext1:	
   578 ;; *************** function _sendSerial *****************
   579 ;; Defined at:
   580 ;;		line 170 in file "BoardTC.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  data            1    wreg     unsigned char 
   583 ;; Auto vars:     Size  Location     Type
   584 ;;  data            1    1[COMMON] unsigned char 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  1    wreg      void 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   594 ;;      Params:         0       0       0       0       0
   595 ;;      Locals:         1       0       0       0       0
   596 ;;      Temps:          1       0       0       0       0
   597 ;;      Totals:         2       0       0       0       0
   598 ;;Total ram usage:        2 bytes
   599 ;; Hardware stack levels used: 1
   600 ;; This function calls:
   601 ;;		Nothing
   602 ;; This function is called by:
   603 ;;		_main
   604 ;;		_UART_TxString
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           
   609                           ;psect for function _sendSerial
   610  063B                     _sendSerial:
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _sendSerial: [wreg+status,2+status,0]
   614                           ;sendSerial@data stored from wreg
   615  063B  00F1               	movwf	sendSerial@data
   616  063C                     l923:
   617  063C                     l77:	
   618                           ;BoardTC.c: 170: void sendSerial(char data);BoardTC.c: 171: {;BoardTC.c: 172:  while(!(P
      +                          IR1 & 0x10));
   619                           
   620  063C  1283               	bcf	3,5	;RP0=0, select bank0
   621  063D  1303               	bcf	3,6	;RP1=0, select bank0
   622  063E  1E0C               	btfss	12,4	;volatile
   623  063F  2E41               	goto	u291
   624  0640  2E42               	goto	u290
   625  0641                     u291:
   626  0641  2E3C               	goto	l77
   627  0642                     u290:
   628  0642                     l925:
   629                           
   630                           ;BoardTC.c: 173:  PIR1 &= ~0x10;
   631  0642  30EF               	movlw	239
   632  0643  00F0               	movwf	??_sendSerial
   633  0644  0870               	movf	??_sendSerial,w
   634  0645  058C               	andwf	12,f	;volatile
   635  0646                     l927:
   636                           
   637                           ;BoardTC.c: 174:  TXREG = data;
   638  0646  0871               	movf	sendSerial@data,w
   639  0647  0099               	movwf	25	;volatile
   640  0648                     l80:
   641  0648  0008               	return
   642  0649                     __end_of_sendSerial:
   643                           
   644                           	psect	text2
   645  0676                     __ptext2:	
   646 ;; *************** function _initSerial *****************
   647 ;; Defined at:
   648 ;;		line 106 in file "BoardTC.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  baudRate        4    6[BANK0 ] unsigned long 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, pclath, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   662 ;;      Params:         0       4       0       0       0
   663 ;;      Locals:         0       0       0       0       0
   664 ;;      Temps:          4       0       0       0       0
   665 ;;      Totals:         4       4       0       0       0
   666 ;;Total ram usage:        8 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; Hardware stack levels required when called: 1
   669 ;; This function calls:
   670 ;;		___aldiv
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           
   677                           ;psect for function _initSerial
   678  0676                     _initSerial:
   679  0676                     l905:	
   680                           ;incstack = 0
   681                           ; Regs used in _initSerial: [wreg+status,2+status,0+pclath+cstack]
   682                           
   683                           
   684                           ;BoardTC.c: 106: void initSerial(unsigned long int baudRate);BoardTC.c: 107: {;BoardTC.c
      +                          : 108:  TRISC &= ~0x40;
   685  0676  30BF               	movlw	191
   686  0677  00F9               	movwf	??_initSerial
   687  0678  0879               	movf	??_initSerial,w
   688  0679  1683               	bsf	3,5	;RP0=1, select bank1
   689  067A  1303               	bcf	3,6	;RP1=0, select bank1
   690  067B  0587               	andwf	7,f	;volatile
   691  067C                     l907:
   692                           
   693                           ;BoardTC.c: 109:  TRISC |= 0x80;
   694  067C  1787               	bsf	7,7	;volatile
   695  067D                     l909:
   696                           
   697                           ;BoardTC.c: 111:  TXSTA = 0x20;
   698  067D  3020               	movlw	32
   699  067E  0098               	movwf	24	;volatile
   700  067F                     l911:
   701                           
   702                           ;BoardTC.c: 113:  RCSTA = 0x90;
   703  067F  3090               	movlw	144
   704  0680  1283               	bcf	3,5	;RP0=0, select bank0
   705  0681  1303               	bcf	3,6	;RP1=0, select bank0
   706  0682  0098               	movwf	24	;volatile
   707  0683                     l913:
   708                           
   709                           ;BoardTC.c: 115:  INTCON |= 0x80;
   710  0683  178B               	bsf	11,7	;volatile
   711  0684                     l915:
   712                           
   713                           ;BoardTC.c: 116:  INTCON |= 0x40;
   714  0684  170B               	bsf	11,6	;volatile
   715  0685                     l917:
   716                           
   717                           ;BoardTC.c: 117:  PIE1 |= 0x20;
   718  0685  1683               	bsf	3,5	;RP0=1, select bank1
   719  0686  1303               	bcf	3,6	;RP1=0, select bank1
   720  0687  168C               	bsf	12,5	;volatile
   721  0688                     l919:
   722                           
   723                           ;BoardTC.c: 119:  received = 0;
   724  0688  1283               	bcf	3,5	;RP0=0, select bank0
   725  0689  1303               	bcf	3,6	;RP1=0, select bank0
   726  068A  01B8               	clrf	_received
   727  068B                     l921:
   728                           
   729                           ;BoardTC.c: 121:  SPBRG = (char) (8000000 / (long) (64UL*baudRate)) - 1;
   730  068B  0826               	movf	initSerial@baudRate,w
   731  068C  00F9               	movwf	??_initSerial
   732  068D  0827               	movf	initSerial@baudRate+1,w
   733  068E  00FA               	movwf	??_initSerial+1
   734  068F  0828               	movf	initSerial@baudRate+2,w
   735  0690  00FB               	movwf	??_initSerial+2
   736  0691  0829               	movf	initSerial@baudRate+3,w
   737  0692  00FC               	movwf	??_initSerial+3
   738  0693  3006               	movlw	6
   739  0694                     u285:
   740  0694  1003               	clrc
   741  0695  0DF9               	rlf	??_initSerial,f
   742  0696  0DFA               	rlf	??_initSerial+1,f
   743  0697  0DFB               	rlf	??_initSerial+2,f
   744  0698  0DFC               	rlf	??_initSerial+3,f
   745  0699                     u280:
   746  0699  3EFF               	addlw	-1
   747  069A  1D03               	skipz
   748  069B  2E94               	goto	u285
   749  069C  087C               	movf	??_initSerial+3,w
   750  069D  00F3               	movwf	___aldiv@divisor+3
   751  069E  087B               	movf	??_initSerial+2,w
   752  069F  00F2               	movwf	___aldiv@divisor+2
   753  06A0  087A               	movf	??_initSerial+1,w
   754  06A1  00F1               	movwf	___aldiv@divisor+1
   755  06A2  0879               	movf	??_initSerial,w
   756  06A3  00F0               	movwf	___aldiv@divisor
   757  06A4  3000               	movlw	0
   758  06A5  00F7               	movwf	___aldiv@dividend+3
   759  06A6  307A               	movlw	122
   760  06A7  00F6               	movwf	___aldiv@dividend+2
   761  06A8  3012               	movlw	18
   762  06A9  00F5               	movwf	___aldiv@dividend+1
   763  06AA  3000               	movlw	0
   764  06AB  00F4               	movwf	___aldiv@dividend
   765  06AC  120A  118A  26B7  120A  118A  	fcall	___aldiv
   766  06B1  0870               	movf	?___aldiv,w
   767  06B2  3EFF               	addlw	255
   768  06B3  1683               	bsf	3,5	;RP0=1, select bank1
   769  06B4  1303               	bcf	3,6	;RP1=0, select bank1
   770  06B5  0099               	movwf	25	;volatile
   771  06B6                     l63:
   772  06B6  0008               	return
   773  06B7                     __end_of_initSerial:
   774                           
   775                           	psect	text3
   776  06B7                     __ptext3:	
   777 ;; *************** function ___aldiv *****************
   778 ;; Defined at:
   779 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  divisor         4    0[COMMON] long 
   782 ;;  dividend        4    4[COMMON] long 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  quotient        4    2[BANK0 ] long 
   785 ;;  sign            1    1[BANK0 ] unsigned char 
   786 ;;  counter         1    0[BANK0 ] unsigned char 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  4    0[COMMON] long 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   796 ;;      Params:         8       0       0       0       0
   797 ;;      Locals:         0       6       0       0       0
   798 ;;      Temps:          1       0       0       0       0
   799 ;;      Totals:         9       6       0       0       0
   800 ;;Total ram usage:       15 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_initSerial
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           
   810                           ;psect for function ___aldiv
   811  06B7                     ___aldiv:
   812  06B7                     l859:	
   813                           ;incstack = 0
   814                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   815                           
   816  06B7  1283               	bcf	3,5	;RP0=0, select bank0
   817  06B8  1303               	bcf	3,6	;RP1=0, select bank0
   818  06B9  01A1               	clrf	___aldiv@sign
   819  06BA                     l861:
   820  06BA  1FF3               	btfss	___aldiv@divisor+3,7
   821  06BB  2EBD               	goto	u181
   822  06BC  2EBE               	goto	u180
   823  06BD                     u181:
   824  06BD  2ECB               	goto	l240
   825  06BE                     u180:
   826  06BE                     l863:
   827  06BE  09F0               	comf	___aldiv@divisor,f
   828  06BF  09F1               	comf	___aldiv@divisor+1,f
   829  06C0  09F2               	comf	___aldiv@divisor+2,f
   830  06C1  09F3               	comf	___aldiv@divisor+3,f
   831  06C2  0AF0               	incf	___aldiv@divisor,f
   832  06C3  1903               	skipnz
   833  06C4  0AF1               	incf	___aldiv@divisor+1,f
   834  06C5  1903               	skipnz
   835  06C6  0AF2               	incf	___aldiv@divisor+2,f
   836  06C7  1903               	skipnz
   837  06C8  0AF3               	incf	___aldiv@divisor+3,f
   838  06C9  01A1               	clrf	___aldiv@sign
   839  06CA  0AA1               	incf	___aldiv@sign,f
   840  06CB                     l240:
   841  06CB  1FF7               	btfss	___aldiv@dividend+3,7
   842  06CC  2ECE               	goto	u191
   843  06CD  2ECF               	goto	u190
   844  06CE                     u191:
   845  06CE  2EDE               	goto	l869
   846  06CF                     u190:
   847  06CF                     l865:
   848  06CF  09F4               	comf	___aldiv@dividend,f
   849  06D0  09F5               	comf	___aldiv@dividend+1,f
   850  06D1  09F6               	comf	___aldiv@dividend+2,f
   851  06D2  09F7               	comf	___aldiv@dividend+3,f
   852  06D3  0AF4               	incf	___aldiv@dividend,f
   853  06D4  1903               	skipnz
   854  06D5  0AF5               	incf	___aldiv@dividend+1,f
   855  06D6  1903               	skipnz
   856  06D7  0AF6               	incf	___aldiv@dividend+2,f
   857  06D8  1903               	skipnz
   858  06D9  0AF7               	incf	___aldiv@dividend+3,f
   859  06DA                     l867:
   860  06DA  3001               	movlw	1
   861  06DB  00F8               	movwf	??___aldiv
   862  06DC  0878               	movf	??___aldiv,w
   863  06DD  06A1               	xorwf	___aldiv@sign,f
   864  06DE                     l869:
   865  06DE  3000               	movlw	0
   866  06DF  00A5               	movwf	___aldiv@quotient+3
   867  06E0  3000               	movlw	0
   868  06E1  00A4               	movwf	___aldiv@quotient+2
   869  06E2  3000               	movlw	0
   870  06E3  00A3               	movwf	___aldiv@quotient+1
   871  06E4  3000               	movlw	0
   872  06E5  00A2               	movwf	___aldiv@quotient
   873  06E6                     l871:
   874  06E6  0873               	movf	___aldiv@divisor+3,w
   875  06E7  0472               	iorwf	___aldiv@divisor+2,w
   876  06E8  0471               	iorwf	___aldiv@divisor+1,w
   877  06E9  0470               	iorwf	___aldiv@divisor,w
   878  06EA  1903               	skipnz
   879  06EB  2EED               	goto	u201
   880  06EC  2EEE               	goto	u200
   881  06ED                     u201:
   882  06ED  2F3B               	goto	l891
   883  06EE                     u200:
   884  06EE                     l873:
   885  06EE  01A0               	clrf	___aldiv@counter
   886  06EF  0AA0               	incf	___aldiv@counter,f
   887  06F0  2EFE               	goto	l877
   888  06F1                     l875:
   889  06F1  3001               	movlw	1
   890  06F2  00F8               	movwf	??___aldiv
   891  06F3                     u215:
   892  06F3  1003               	clrc
   893  06F4  0DF0               	rlf	___aldiv@divisor,f
   894  06F5  0DF1               	rlf	___aldiv@divisor+1,f
   895  06F6  0DF2               	rlf	___aldiv@divisor+2,f
   896  06F7  0DF3               	rlf	___aldiv@divisor+3,f
   897  06F8  0BF8               	decfsz	??___aldiv,f
   898  06F9  2EF3               	goto	u215
   899  06FA  3001               	movlw	1
   900  06FB  00F8               	movwf	??___aldiv
   901  06FC  0878               	movf	??___aldiv,w
   902  06FD  07A0               	addwf	___aldiv@counter,f
   903  06FE                     l877:
   904  06FE  1FF3               	btfss	___aldiv@divisor+3,7
   905  06FF  2F01               	goto	u221
   906  0700  2F02               	goto	u220
   907  0701                     u221:
   908  0701  2EF1               	goto	l875
   909  0702                     u220:
   910  0702                     l879:
   911  0702  3001               	movlw	1
   912  0703  00F8               	movwf	??___aldiv
   913  0704                     u235:
   914  0704  1003               	clrc
   915  0705  0DA2               	rlf	___aldiv@quotient,f
   916  0706  0DA3               	rlf	___aldiv@quotient+1,f
   917  0707  0DA4               	rlf	___aldiv@quotient+2,f
   918  0708  0DA5               	rlf	___aldiv@quotient+3,f
   919  0709  0BF8               	decfsz	??___aldiv,f
   920  070A  2F04               	goto	u235
   921  070B                     l881:
   922  070B  0873               	movf	___aldiv@divisor+3,w
   923  070C  0277               	subwf	___aldiv@dividend+3,w
   924  070D  1D03               	skipz
   925  070E  2F19               	goto	u245
   926  070F  0872               	movf	___aldiv@divisor+2,w
   927  0710  0276               	subwf	___aldiv@dividend+2,w
   928  0711  1D03               	skipz
   929  0712  2F19               	goto	u245
   930  0713  0871               	movf	___aldiv@divisor+1,w
   931  0714  0275               	subwf	___aldiv@dividend+1,w
   932  0715  1D03               	skipz
   933  0716  2F19               	goto	u245
   934  0717  0870               	movf	___aldiv@divisor,w
   935  0718  0274               	subwf	___aldiv@dividend,w
   936  0719                     u245:
   937  0719  1C03               	skipc
   938  071A  2F1C               	goto	u241
   939  071B  2F1D               	goto	u240
   940  071C                     u241:
   941  071C  2F2C               	goto	l887
   942  071D                     u240:
   943  071D                     l883:
   944  071D  0870               	movf	___aldiv@divisor,w
   945  071E  02F4               	subwf	___aldiv@dividend,f
   946  071F  0871               	movf	___aldiv@divisor+1,w
   947  0720  1C03               	skipc
   948  0721  0F71               	incfsz	___aldiv@divisor+1,w
   949  0722  02F5               	subwf	___aldiv@dividend+1,f
   950  0723  0872               	movf	___aldiv@divisor+2,w
   951  0724  1C03               	skipc
   952  0725  0F72               	incfsz	___aldiv@divisor+2,w
   953  0726  02F6               	subwf	___aldiv@dividend+2,f
   954  0727  0873               	movf	___aldiv@divisor+3,w
   955  0728  1C03               	skipc
   956  0729  0F73               	incfsz	___aldiv@divisor+3,w
   957  072A  02F7               	subwf	___aldiv@dividend+3,f
   958  072B                     l885:
   959  072B  1422               	bsf	___aldiv@quotient,0
   960  072C                     l887:
   961  072C  3001               	movlw	1
   962  072D                     u255:
   963  072D  1003               	clrc
   964  072E  0CF3               	rrf	___aldiv@divisor+3,f
   965  072F  0CF2               	rrf	___aldiv@divisor+2,f
   966  0730  0CF1               	rrf	___aldiv@divisor+1,f
   967  0731  0CF0               	rrf	___aldiv@divisor,f
   968  0732  3EFF               	addlw	-1
   969  0733  1D03               	skipz
   970  0734  2F2D               	goto	u255
   971  0735                     l889:
   972  0735  3001               	movlw	1
   973  0736  02A0               	subwf	___aldiv@counter,f
   974  0737  1D03               	btfss	3,2
   975  0738  2F3A               	goto	u261
   976  0739  2F3B               	goto	u260
   977  073A                     u261:
   978  073A  2F02               	goto	l879
   979  073B                     u260:
   980  073B                     l891:
   981  073B  0821               	movf	___aldiv@sign,w
   982  073C  1903               	btfsc	3,2
   983  073D  2F3F               	goto	u271
   984  073E  2F40               	goto	u270
   985  073F                     u271:
   986  073F  2F4B               	goto	l895
   987  0740                     u270:
   988  0740                     l893:
   989  0740  09A2               	comf	___aldiv@quotient,f
   990  0741  09A3               	comf	___aldiv@quotient+1,f
   991  0742  09A4               	comf	___aldiv@quotient+2,f
   992  0743  09A5               	comf	___aldiv@quotient+3,f
   993  0744  0AA2               	incf	___aldiv@quotient,f
   994  0745  1903               	skipnz
   995  0746  0AA3               	incf	___aldiv@quotient+1,f
   996  0747  1903               	skipnz
   997  0748  0AA4               	incf	___aldiv@quotient+2,f
   998  0749  1903               	skipnz
   999  074A  0AA5               	incf	___aldiv@quotient+3,f
  1000  074B                     l895:
  1001  074B  0825               	movf	___aldiv@quotient+3,w
  1002  074C  00F3               	movwf	?___aldiv+3
  1003  074D  0824               	movf	___aldiv@quotient+2,w
  1004  074E  00F2               	movwf	?___aldiv+2
  1005  074F  0823               	movf	___aldiv@quotient+1,w
  1006  0750  00F1               	movwf	?___aldiv+1
  1007  0751  0822               	movf	___aldiv@quotient,w
  1008  0752  00F0               	movwf	?___aldiv
  1009  0753                     l250:
  1010  0753  0008               	return
  1011  0754                     __end_of___aldiv:
  1012                           
  1013                           	psect	text4
  1014  062F                     __ptext4:	
  1015 ;; *************** function _init *****************
  1016 ;; Defined at:
  1017 ;;		line 95 in file "BoardTC.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, status,2
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0
  1034 ;;      Totals:         0       0       0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_main
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           
  1045                           ;psect for function _init
  1046  062F                     _init:
  1047  062F                     l899:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _init: [wreg+status,2]
  1050                           
  1051                           
  1052                           ;BoardTC.c: 97:     TRISA |= 0x01;
  1053  062F  1683               	bsf	3,5	;RP0=1, select bank1
  1054  0630  1303               	bcf	3,6	;RP1=0, select bank1
  1055  0631  1405               	bsf	5,0	;volatile
  1056  0632                     l901:
  1057                           
  1058                           ;BoardTC.c: 98:     TRISB = 0x00;
  1059  0632  0186               	clrf	6	;volatile
  1060                           
  1061                           ;BoardTC.c: 99:     TRISC = 0x00;
  1062  0633  0187               	clrf	7	;volatile
  1063                           
  1064                           ;BoardTC.c: 100:     TRISD = 0x00;
  1065  0634  0188               	clrf	8	;volatile
  1066                           
  1067                           ;BoardTC.c: 101:     TRISE = 0x00;
  1068  0635  0189               	clrf	9	;volatile
  1069  0636                     l903:
  1070                           
  1071                           ;BoardTC.c: 102:     PORTA = 0x20;
  1072  0636  3020               	movlw	32
  1073  0637  1283               	bcf	3,5	;RP0=0, select bank0
  1074  0638  1303               	bcf	3,6	;RP1=0, select bank0
  1075  0639  0085               	movwf	5	;volatile
  1076  063A                     l60:
  1077  063A  0008               	return
  1078  063B                     __end_of_init:
  1079                           
  1080                           	psect	text5
  1081  0625                     __ptext5:	
  1082 ;; *************** function _LCDPosition *****************
  1083 ;; Defined at:
  1084 ;;		line 164 in file "BoardTC.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  r               1    wreg     unsigned char 
  1087 ;;  c               1    4[COMMON] unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  r               1    5[COMMON] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         1       0       0       0       0
  1100 ;;      Locals:         1       0       0       0       0
  1101 ;;      Temps:          0       0       0       0       0
  1102 ;;      Totals:         2       0       0       0       0
  1103 ;;Total ram usage:        2 bytes
  1104 ;; Hardware stack levels used: 1
  1105 ;; Hardware stack levels required when called: 1
  1106 ;; This function calls:
  1107 ;;		_LCDData
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _LCDPosition
  1115  0625                     _LCDPosition:
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in _LCDPosition: [wreg+status,2+status,0+pclath+cstack]
  1119                           ;LCDPosition@r stored from wreg
  1120  0625  00F5               	movwf	LCDPosition@r
  1121  0626                     l929:
  1122                           
  1123                           ;BoardTC.c: 164: void LCDPosition(char r, char c);BoardTC.c: 165: {;BoardTC.c: 166:     
      +                          LCDData(r + c, 0);
  1124  0626  01F0               	clrf	LCDData@mode
  1125  0627  0874               	movf	LCDPosition@c,w
  1126  0628  0775               	addwf	LCDPosition@r,w
  1127  0629  120A  118A  2649  120A  118A  	fcall	_LCDData
  1128  062E                     l74:
  1129  062E  0008               	return
  1130  062F                     __end_of_LCDPosition:
  1131                           
  1132                           	psect	text6
  1133  0649                     __ptext6:	
  1134 ;; *************** function _LCDData *****************
  1135 ;; Defined at:
  1136 ;;		line 145 in file "BoardTC.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  data            1    wreg     unsigned char 
  1139 ;;  mode            1    0[COMMON] unsigned char 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  data            1    3[COMMON] unsigned char 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, status,2, status,0
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         1       0       0       0       0
  1152 ;;      Locals:         1       0       0       0       0
  1153 ;;      Temps:          2       0       0       0       0
  1154 ;;      Totals:         4       0       0       0       0
  1155 ;;Total ram usage:        4 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; This function calls:
  1158 ;;		Nothing
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;;		_LCDPosition
  1162 ;;		_LCDInit
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _LCDData
  1168  0649                     _LCDData:
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in _LCDData: [wreg+status,2+status,0]
  1172                           ;LCDData@data stored from wreg
  1173  0649  00F3               	movwf	LCDData@data
  1174  064A                     l843:
  1175                           
  1176                           ;BoardTC.c: 145: void LCDData(char data, char mode);BoardTC.c: 146: {;BoardTC.c: 147:   
      +                                PORTE |= 0x02;
  1177  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1178  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1179  064C  1489               	bsf	9,1	;volatile
  1180  064D                     l845:
  1181                           
  1182                           ;BoardTC.c: 148:         PORTD = data;
  1183  064D  0873               	movf	LCDData@data,w
  1184  064E  0088               	movwf	8	;volatile
  1185  064F                     l847:
  1186                           
  1187                           ;BoardTC.c: 149:         if(mode)
  1188  064F  0870               	movf	LCDData@mode,w
  1189  0650  1903               	btfsc	3,2
  1190  0651  2E53               	goto	u171
  1191  0652  2E54               	goto	u170
  1192  0653                     u171:
  1193  0653  2E56               	goto	l851
  1194  0654                     u170:
  1195  0654                     l849:
  1196                           
  1197                           ;BoardTC.c: 150:         {;BoardTC.c: 151:             PORTE |= 0x04;
  1198  0654  1509               	bsf	9,2	;volatile
  1199                           
  1200                           ;BoardTC.c: 152:         }
  1201  0655  2E5A               	goto	l853
  1202  0656                     l851:
  1203                           
  1204                           ;BoardTC.c: 154:         {;BoardTC.c: 155:             PORTE &= ~0x04;
  1205  0656  30FB               	movlw	251
  1206  0657  00F1               	movwf	??_LCDData
  1207  0658  0871               	movf	??_LCDData,w
  1208  0659  0589               	andwf	9,f	;volatile
  1209  065A                     l853:
  1210                           
  1211                           ;BoardTC.c: 157:         _delay((unsigned long)((3)*(8000000/4000.0)));
  1212  065A  3008               	movlw	8
  1213  065B  00F2               	movwf	??_LCDData+1
  1214  065C  30C9               	movlw	201
  1215  065D  00F1               	movwf	??_LCDData
  1216  065E                     u557:
  1217  065E  0BF1               	decfsz	??_LCDData,f
  1218  065F  2E5E               	goto	u557
  1219  0660  0BF2               	decfsz	??_LCDData+1,f
  1220  0661  2E5E               	goto	u557
  1221  0662  2E63               	nop2
  1222  0663                     l855:
  1223                           
  1224                           ;BoardTC.c: 158:         PORTE &= ~0x02;
  1225  0663  30FD               	movlw	253
  1226  0664  00F1               	movwf	??_LCDData
  1227  0665  0871               	movf	??_LCDData,w
  1228  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1229  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1230  0668  0589               	andwf	9,f	;volatile
  1231                           
  1232                           ;BoardTC.c: 159:         _delay((unsigned long)((3)*(8000000/4000.0)));
  1233  0669  3008               	movlw	8
  1234  066A  00F2               	movwf	??_LCDData+1
  1235  066B  30C9               	movlw	201
  1236  066C  00F1               	movwf	??_LCDData
  1237  066D                     u567:
  1238  066D  0BF1               	decfsz	??_LCDData,f
  1239  066E  2E6D               	goto	u567
  1240  066F  0BF2               	decfsz	??_LCDData+1,f
  1241  0670  2E6D               	goto	u567
  1242  0671  2E72               	nop2
  1243  0672                     l857:
  1244                           
  1245                           ;BoardTC.c: 160:         PORTE |= 0x02;
  1246  0672  1283               	bcf	3,5	;RP0=0, select bank0
  1247  0673  1303               	bcf	3,6	;RP1=0, select bank0
  1248  0674  1489               	bsf	9,1	;volatile
  1249  0675                     l71:
  1250  0675  0008               	return
  1251  0676                     __end_of_LCDData:
  1252  007E                     btemp	set	126	;btemp
  1253  007E                     wtemp0	set	126
  1254                           
  1255                           	psect	config
  1256                           
  1257                           ;Config register CONFIG @ 0x2007
  1258                           ;	Oscillator Selection bits
  1259                           ;	FOSC = HS, HS oscillator
  1260                           ;	Watchdog Timer Enable bit
  1261                           ;	WDTE = OFF, WDT disabled
  1262                           ;	Power-up Timer Enable bit
  1263                           ;	PWRTE = ON, PWRT enabled
  1264                           ;	Brown-out Reset Enable bit
  1265                           ;	BOREN = ON, BOR enabled
  1266                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1267                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1268                           ;	Data EEPROM Memory Code Protection bit
  1269                           ;	CPD = OFF, Data EEPROM code protection off
  1270                           ;	Flash Program Memory Write Enable bits
  1271                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1272                           ;	In-Circuit Debugger Mode bit
  1273                           ;	DEBUG = 0x1, unprogrammed default
  1274                           ;	Flash Program Memory Code Protection bit
  1275                           ;	CP = OFF, Code protection off
  1276  2007                     	org	8199
  1277  2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     19      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initSerial
    _initSerial->___aldiv
    _LCDPosition->_LCDData

Critical Paths under _main in BANK0

    _main->_initSerial
    _initSerial->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2439
                                             10 BANK0      9     9      0
                            _LCDData
                        _LCDPosition
                               _init
                         _initSerial
                         _sendSerial
 ---------------------------------------------------------------------------------
 (1) _sendSerial                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           8     4      4     550
                                              9 COMMON     4     4      0
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDPosition                                          2     1      1     924
                                              4 COMMON     2     1      1
                            _LCDData
 ---------------------------------------------------------------------------------
 (2) _LCDData                                              4     3      1     804
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDData
   _LCDPosition
     _LCDData
   _init
   _initSerial
     ___aldiv
   _sendSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      26       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      19       5       31.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      26      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 22 17:16:52 2022

                     l60 063A                       l71 0675                       l63 06B6  
                     l80 0648                       l74 062E                       l77 063C  
                    l240 06CB                      l250 0753                      l901 0632  
                    l903 0636                      l911 067F                      l921 068B  
                    l913 0683                      l905 0676                      l851 0656  
                    l843 064A                      l915 0684                      l907 067C  
                    l923 063C                      l931 0754                      l853 065A  
                    l845 064D                      l861 06BA                      l917 0685  
                    l909 067D                      l925 0642                      l941 0772  
                    l933 0768                      l855 0663                      l847 064F  
                    l871 06E6                      l863 06BE                      l919 0688  
                    l927 0646                      l951 07A6                      l943 0776  
                    l935 076B                      l857 0672                      l849 0654  
                    l929 0626                      l881 070B                      l873 06EE  
                    l865 06CF                      l961 07DF                      l953 07B3  
                    l945 077A                      l937 076D                      l883 071D  
                    l875 06F1                      l891 073B                      l867 06DA  
                    l859 06B7                      l963 07EC                      l955 07C1  
                    l947 078C                      l939 0771                      l893 0740  
                    l885 072B                      l877 06FE                      l869 06DE  
                    l957 07CD                      l949 0794                      l895 074B  
                    l887 072C                      l879 0702                      l959 07D7  
                    l889 0735                      l899 062F                      u200 06EE  
                    u201 06ED                      u220 0702                      u221 0701  
                    u310 07EC                      u215 06F3                      u311 07EB  
                    u240 071D                      u304 07AE                      u241 071C  
                    u305 07AC                      u170 0654                      u171 0653  
                    u235 0704                      u315 07E8                      u260 073B  
                    u180 06BE                      u261 073A                      u245 0719  
                    u181 06BD                      u270 0740                      u190 06CF  
                    u271 073F                      u255 072D                      u191 06CE  
                    u280 0699                      u290 0642                      u291 0641  
                    u285 0694                      u527 0788                      u537 079A  
                    u547 07BB                      u557 065E                      u567 066D  
           ?_LCDPosition 0074          __end_of_LCDData 0676                     _PIE1 008C  
                   _PIR1 000C                     _main 0754                     _init 062F  
                   btemp 007E                     start 0000          __end_of___aldiv 0754  
                  ?_main 0070                    ?_init 0070                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTA 0005                    _PORTD 0008  
                  _PORTE 0009                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019                    _TXSTA 0098                    main@a 002E  
                  main@b 002F                    main@c 002D                    main@i 0031  
                  status 0003                    wtemp0 007E          __initialization 07F4  
           __end_of_main 07F4             __end_of_init 063B                   ??_main 002A  
                 ??_init 0070                ??_LCDData 0071                   _INTCON 000B  
           LCDPosition@c 0074             LCDPosition@r 0075                ??___aldiv 0078  
   __size_of_LCDPosition 000A  __end_of__initialization 07FC           __pcstackCOMMON 0070  
             __pbssBANK0 0033               __pmaintext 0754                  _LCDData 0649  
                ___aldiv 06B7               _initSerial 0676                  __ptext1 063B  
                __ptext2 0676                  __ptext3 06B7                  __ptext4 062F  
                __ptext5 0625                  __ptext6 0649                  _convInt 0033  
       ___aldiv@dividend 0074     end_of_initialization 07FC               _sendSerial 063B  
       ___aldiv@quotient 0022                _PORTEbits 0009              ?_initSerial 0026  
          ??_LCDPosition 0075      start_initialization 07F4              ?_sendSerial 0070  
     initSerial@baudRate 0026                 ?_LCDData 0070                ___latbits 0002  
          __pcstackBANK0 0020      __size_of_initSerial 0041      __end_of_LCDPosition 062F  
               ?___aldiv 0070      __size_of_sendSerial 000E          ___aldiv@divisor 0070  
        ___aldiv@counter 0020         __size_of_LCDData 002D              _LCDPosition 0625  
        main@sendDataLCD 0030             ??_initSerial 0079         __size_of___aldiv 009D  
         sendSerial@data 0071             ??_sendSerial 0070       __end_of_initSerial 06B7  
          __size_of_main 00A0            __size_of_init 000C                 _received 0038  
     __end_of_sendSerial 0649             ___aldiv@sign 0021              LCDData@data 0073  
            LCDData@mode 0070  
