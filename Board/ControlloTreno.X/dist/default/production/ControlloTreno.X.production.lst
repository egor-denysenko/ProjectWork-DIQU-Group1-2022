

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 15 15:34:06 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177                           
   178                           	psect	idataBANK0
   179  05D0                     __pidataBANK0:
   180                           
   181                           ;initializer for _codiceSeriale2
   182  05D0  3476               	retlw	118
   183                           
   184                           ;initializer for _codiceSeriale1
   185  05D1  34F4               	retlw	244
   186                           
   187                           ;initializer for _codiceSeriale0
   188  05D2  34FF               	retlw	255
   189                           
   190                           ;initializer for _data
   191  05D3  3469               	retlw	105
   192                           
   193                           ;initializer for _dataLCD
   194  05D4  3454               	retlw	84
   195  05D5  343A               	retlw	58
   196  05D6  3420               	retlw	32
   197  05D7  3432               	retlw	50
   198  05D8  3432               	retlw	50
   199  05D9  342E               	retlw	46
   200  05DA  3433               	retlw	51
   201  05DB  3443               	retlw	67
   202  05DC  3400               	retlw	0
   203  05DD  3400               	retlw	0
   204  05DE  3400               	retlw	0
   205  05DF  3400               	retlw	0
   206  001E                     _ADRESH	set	30
   207  001F                     _ADCON0	set	31
   208  0006                     _PORTB	set	6
   209  0019                     _TXREG	set	25
   210  000C                     _PIR1	set	12
   211  000B                     _INTCON	set	11
   212  0018                     _RCSTA	set	24
   213  0009                     _PORTE	set	9
   214  0008                     _PORTD	set	8
   215  0005                     _PORTA	set	5
   216  009E                     _ADRESL	set	158
   217  009F                     _ADCON1	set	159
   218  0099                     _SPBRG	set	153
   219  008C                     _PIE1	set	140
   220  0098                     _TXSTA	set	152
   221  0089                     _TRISE	set	137
   222  0087                     _TRISC	set	135
   223  0086                     _TRISB	set	134
   224  0085                     _TRISA	set	133
   225  0088                     _TRISD	set	136
   226                           
   227                           	psect	cinit
   228  07EB                     start_initialization:	
   229                           ; #config settings
   230                           
   231  07EB                     __initialization:
   232                           
   233                           ; Initialize objects allocated to BANK0
   234  07EB  1383               	bcf	3,7	;select IRP bank0
   235  07EC  3030               	movlw	low (__pdataBANK0+16)
   236  07ED  00FD               	movwf	btemp+-1
   237  07EE  3005               	movlw	high __pidataBANK0
   238  07EF  00FE               	movwf	btemp
   239  07F0  30D0               	movlw	low __pidataBANK0
   240  07F1  00FF               	movwf	btemp+1
   241  07F2  3020               	movlw	low __pdataBANK0
   242  07F3  0084               	movwf	4
   243  07F4  120A  118A  25E4  120A  118A  	fcall	init_ram0
   244                           
   245                           ; Clear objects allocated to BANK0
   246  07F9  01BC               	clrf	__pbssBANK0& (0+127)
   247  07FA  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   248                           
   249                           ; Clear objects allocated to COMMON
   250  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   251  07FC                     end_of_initialization:	
   252                           ;End of C runtime variable initialization code
   253                           
   254  07FC                     __end_of__initialization:
   255  07FC  0183               	clrf	3
   256  07FD  120A  118A  2EA9   	ljmp	_main	;jump to C main() function
   257                           
   258                           	psect	bssCOMMON
   259  007D                     __pbssCOMMON:
   260  007D                     _c:
   261  007D                     	ds	1
   262                           
   263                           	psect	bssBANK0
   264  003C                     __pbssBANK0:
   265  003C                     _received:
   266  003C                     	ds	1
   267  003D                     _pos:
   268  003D                     	ds	1
   269                           
   270                           	psect	dataBANK0
   271  0020                     __pdataBANK0:
   272  0020                     _codiceSeriale2:
   273  0020                     	ds	1
   274  0021                     _codiceSeriale1:
   275  0021                     	ds	1
   276  0022                     _codiceSeriale0:
   277  0022                     	ds	1
   278  0023                     _data:
   279  0023                     	ds	1
   280  0024                     _dataLCD:
   281  0024                     	ds	12
   282                           
   283                           	psect	inittext
   284  05E0                     init_fetch0:	
   285                           ;	Called with low address in FSR and high address in W
   286                           
   287  05E0  087E               	movf	btemp,w
   288  05E1  008A               	movwf	10
   289  05E2  087F               	movf	btemp+1,w
   290  05E3  0082               	movwf	2
   291  05E4                     init_ram0:	
   292                           ;Called with:
   293                           ;	high address of idata address in btemp 
   294                           ;	low address of idata address in btemp+1 
   295                           ;	low address of data in FSR
   296                           ;	high address + 1 of data in btemp-1
   297                           
   298  05E4  120A  118A  25E0  120A  118A  	fcall	init_fetch0
   299  05E9  0080               	movwf	0
   300  05EA  0A84               	incf	4,f
   301  05EB  0804               	movf	4,w
   302  05EC  067D               	xorwf	btemp+-1,w
   303  05ED  1903               	btfsc	3,2
   304  05EE  3400               	retlw	0
   305  05EF  0AFF               	incf	btemp+1,f
   306  05F0  1903               	btfsc	3,2
   307  05F1  0AFE               	incf	btemp,f
   308  05F2  2DE4               	goto	init_ram0
   309                           
   310                           	psect	cstackCOMMON
   311  0070                     __pcstackCOMMON:
   312  0070                     ?_LCDInit:
   313  0070                     ?_init_ADC:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ??_init_ADC:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_sendLCDString:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_LCDData:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_main:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_read_ADC:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?___aldiv:	
   332                           ; 2 bytes @ 0x0
   333                           
   334  0070                     LCDData@mode:	
   335                           ; 4 bytes @ 0x0
   336                           
   337  0070                     ___aldiv@divisor:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 4 bytes @ 0x0
   342  0070                     	ds	1
   343  0071                     ??_LCDData:
   344                           
   345                           ; 1 bytes @ 0x1
   346  0071                     	ds	1
   347  0072                     ??_read_ADC:
   348                           
   349                           ; 1 bytes @ 0x2
   350  0072                     	ds	1
   351  0073                     LCDData@data:
   352                           
   353                           ; 1 bytes @ 0x3
   354  0073                     	ds	1
   355  0074                     ??_LCDInit:
   356  0074                     ??_sendLCDString:	
   357                           ; 1 bytes @ 0x4
   358                           
   359  0074                     read_ADC@channel:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     ___aldiv@dividend:	
   363                           ; 1 bytes @ 0x4
   364                           
   365                           
   366                           ; 4 bytes @ 0x4
   367  0074                     	ds	1
   368  0075                     sendLCDString@string:
   369                           
   370                           ; 1 bytes @ 0x5
   371  0075                     	ds	1
   372  0076                     sendLCDString@i:
   373                           
   374                           ; 1 bytes @ 0x6
   375  0076                     	ds	2
   376  0078                     ??___aldiv:
   377                           
   378                           ; 1 bytes @ 0x8
   379  0078                     	ds	1
   380  0079                     ??_initSerial:
   381                           
   382                           ; 1 bytes @ 0x9
   383  0079                     	ds	4
   384                           
   385                           	psect	cstackBANK0
   386  0030                     __pcstackBANK0:
   387  0030                     ___aldiv@counter:
   388                           
   389                           ; 1 bytes @ 0x0
   390  0030                     	ds	1
   391  0031                     ___aldiv@sign:
   392                           
   393                           ; 1 bytes @ 0x1
   394  0031                     	ds	1
   395  0032                     ___aldiv@quotient:
   396                           
   397                           ; 4 bytes @ 0x2
   398  0032                     	ds	4
   399  0036                     ?_initSerial:
   400  0036                     initSerial@baudRate:	
   401                           ; 1 bytes @ 0x6
   402                           
   403                           
   404                           ; 4 bytes @ 0x6
   405  0036                     	ds	4
   406  003A                     ??_main:
   407                           
   408                           ; 1 bytes @ 0xA
   409  003A                     	ds	2
   410                           
   411                           	psect	maintext
   412  06A9                     __pmaintext:	
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 72 in file "mainTrainControl.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;		None
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : B00/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   432 ;;      Params:         0       0       0       0       0
   433 ;;      Locals:         0       0       0       0       0
   434 ;;      Temps:          0       2       0       0       0
   435 ;;      Totals:         0       2       0       0       0
   436 ;;Total ram usage:        2 bytes
   437 ;; Hardware stack levels required when called: 2
   438 ;; This function calls:
   439 ;;		_LCDInit
   440 ;;		_initSerial
   441 ;;		_init_ADC
   442 ;;		_read_ADC
   443 ;;		_sendLCDString
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           
   450                           ;psect for function _main
   451  06A9                     _main:
   452  06A9                     l1010:	
   453                           ;incstack = 0
   454                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   455                           
   456                           
   457                           ;mainTrainControl.c: 73:     LCDInit();
   458  06A9  120A  118A  26EE  120A  118A  	fcall	_LCDInit
   459                           
   460                           ;mainTrainControl.c: 74:     initSerial(9600);
   461  06AE  3000               	movlw	0
   462  06AF  1283               	bcf	3,5	;RP0=0, select bank0
   463  06B0  1303               	bcf	3,6	;RP1=0, select bank0
   464  06B1  00B9               	movwf	initSerial@baudRate+3
   465  06B2  3000               	movlw	0
   466  06B3  00B8               	movwf	initSerial@baudRate+2
   467  06B4  3025               	movlw	37
   468  06B5  00B7               	movwf	initSerial@baudRate+1
   469  06B6  3080               	movlw	128
   470  06B7  00B6               	movwf	initSerial@baudRate
   471  06B8  120A  118A  2668  120A  118A  	fcall	_initSerial
   472                           
   473                           ;mainTrainControl.c: 75:     init_ADC();
   474  06BD  120A  118A  25C3  120A  118A  	fcall	_init_ADC
   475  06C2                     l1012:
   476                           
   477                           ;mainTrainControl.c: 77:     {;mainTrainControl.c: 80:         PORTA = 0x01;
   478  06C2  3001               	movlw	1
   479  06C3  1283               	bcf	3,5	;RP0=0, select bank0
   480  06C4  1303               	bcf	3,6	;RP1=0, select bank0
   481  06C5  0085               	movwf	5	;volatile
   482  06C6                     l1014:
   483                           
   484                           ;mainTrainControl.c: 82:         if (c==0){
   485  06C6  087D               	movf	_c,w
   486  06C7  1D03               	btfss	3,2
   487  06C8  2ECA               	goto	u371
   488  06C9  2ECB               	goto	u370
   489  06CA                     u371:
   490  06CA  2ED3               	goto	l1020
   491  06CB                     u370:
   492  06CB                     l1016:
   493                           
   494                           ;mainTrainControl.c: 83:             sendLCDString(dataLCD);
   495  06CB  3024               	movlw	(low (_dataLCD| 0))& (0+255)
   496  06CC  120A  118A  25F3  120A  118A  	fcall	_sendLCDString
   497  06D1                     l1018:
   498                           
   499                           ;mainTrainControl.c: 84:             c = 1;
   500  06D1  01FD               	clrf	_c
   501  06D2  0AFD               	incf	_c,f
   502  06D3                     l1020:
   503                           
   504                           ;mainTrainControl.c: 92:         TRISD=0x00;
   505  06D3  1683               	bsf	3,5	;RP0=1, select bank1
   506  06D4  1303               	bcf	3,6	;RP1=0, select bank1
   507  06D5  0188               	clrf	8	;volatile
   508  06D6                     l1022:
   509                           
   510                           ;mainTrainControl.c: 94:             PORTD = read_ADC(0) >> 2;
   511  06D6  3000               	movlw	0
   512  06D7  120A  118A  2613  120A  118A  	fcall	_read_ADC
   513  06DC  0870               	movf	?_read_ADC,w
   514  06DD  1283               	bcf	3,5	;RP0=0, select bank0
   515  06DE  1303               	bcf	3,6	;RP1=0, select bank0
   516  06DF  00BA               	movwf	??_main
   517  06E0  0871               	movf	?_read_ADC+1,w
   518  06E1  00BB               	movwf	??_main+1
   519  06E2  0D3B               	rlf	??_main+1,w
   520  06E3  0CBB               	rrf	??_main+1,f
   521  06E4  0CBA               	rrf	??_main,f
   522  06E5  0D3B               	rlf	??_main+1,w
   523  06E6  0CBB               	rrf	??_main+1,f
   524  06E7  0CBA               	rrf	??_main,f
   525  06E8  083A               	movf	??_main,w
   526  06E9  0088               	movwf	8	;volatile
   527  06EA  2ED6               	goto	l1022
   528  06EB  120A  118A  2800   	ljmp	start
   529  06EE                     __end_of_main:
   530                           
   531                           	psect	text1
   532  05F3                     __ptext1:	
   533 ;; *************** function _sendLCDString *****************
   534 ;; Defined at:
   535 ;;		line 235 in file "mainTrainControl.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  string          1    wreg     PTR unsigned char 
   538 ;;		 -> dataLCD(12), 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  string          1    5[COMMON] PTR unsigned char 
   541 ;;		 -> dataLCD(12), 
   542 ;;  i               1    6[COMMON] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   552 ;;      Params:         0       0       0       0       0
   553 ;;      Locals:         2       0       0       0       0
   554 ;;      Temps:          1       0       0       0       0
   555 ;;      Totals:         3       0       0       0       0
   556 ;;Total ram usage:        3 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; Hardware stack levels required when called: 1
   559 ;; This function calls:
   560 ;;		_LCDData
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           
   567                           ;psect for function _sendLCDString
   568  05F3                     _sendLCDString:
   569                           
   570                           ;incstack = 0
   571                           ; Regs used in _sendLCDString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   572                           ;sendLCDString@string stored from wreg
   573  05F3  00F5               	movwf	sendLCDString@string
   574  05F4                     l992:
   575                           
   576                           ;mainTrainControl.c: 235: void sendLCDString(char *string);mainTrainControl.c: 236: {;ma
      +                          inTrainControl.c: 237:     char i;;mainTrainControl.c: 238:     for(i=0; string[i]!='\0'
      +                          ; i++){
   577  05F4  01F6               	clrf	sendLCDString@i
   578  05F5  2E07               	goto	l998
   579  05F6                     l994:
   580                           
   581                           ;mainTrainControl.c: 239:         LCDData(string[i], 1);
   582  05F6  01F0               	clrf	LCDData@mode
   583  05F7  0AF0               	incf	LCDData@mode,f
   584  05F8  0876               	movf	sendLCDString@i,w
   585  05F9  0775               	addwf	sendLCDString@string,w
   586  05FA  00F4               	movwf	??_sendLCDString
   587  05FB  0874               	movf	??_sendLCDString,w
   588  05FC  0084               	movwf	4
   589  05FD  0800               	movf	0,w
   590  05FE  120A  118A  263B  120A  118A  	fcall	_LCDData
   591  0603                     l996:
   592                           
   593                           ;mainTrainControl.c: 240:     }
   594  0603  3001               	movlw	1
   595  0604  00F4               	movwf	??_sendLCDString
   596  0605  0874               	movf	??_sendLCDString,w
   597  0606  07F6               	addwf	sendLCDString@i,f
   598  0607                     l998:
   599  0607  0876               	movf	sendLCDString@i,w
   600  0608  0775               	addwf	sendLCDString@string,w
   601  0609  00F4               	movwf	??_sendLCDString
   602  060A  0874               	movf	??_sendLCDString,w
   603  060B  0084               	movwf	4
   604  060C  1383               	bcf	3,7	;select IRP bank0
   605  060D  0800               	movf	0,w
   606  060E  1D03               	btfss	3,2
   607  060F  2E11               	goto	u341
   608  0610  2E12               	goto	u340
   609  0611                     u341:
   610  0611  2DF6               	goto	l994
   611  0612                     u340:
   612  0612                     l115:
   613  0612  0008               	return
   614  0613                     __end_of_sendLCDString:
   615                           
   616                           	psect	text2
   617  0613                     __ptext2:	
   618 ;; *************** function _read_ADC *****************
   619 ;; Defined at:
   620 ;;		line 250 in file "mainTrainControl.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;  channel         1    wreg     unsigned char 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;  channel         1    4[COMMON] unsigned char 
   625 ;; Return value:  Size  Location     Type
   626 ;;                  2    0[COMMON] int 
   627 ;; Registers used:
   628 ;;		wreg, status,2, status,0
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         2       0       0       0       0
   635 ;;      Locals:         1       0       0       0       0
   636 ;;      Temps:          2       0       0       0       0
   637 ;;      Totals:         5       0       0       0       0
   638 ;;Total ram usage:        5 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; This function calls:
   641 ;;		Nothing
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _read_ADC
   649  0613                     _read_ADC:
   650                           
   651                           ;incstack = 0
   652                           ; Regs used in _read_ADC: [wreg+status,2+status,0]
   653                           ;read_ADC@channel stored from wreg
   654  0613  00F4               	movwf	read_ADC@channel
   655  0614                     l1000:
   656                           
   657                           ;mainTrainControl.c: 250: int read_ADC(char channel);mainTrainControl.c: 251: {;mainTrai
      +                          nControl.c: 252:     ADCON0 &= 0xC7;
   658  0614  30C7               	movlw	199
   659  0615  00F2               	movwf	??_read_ADC
   660  0616  0872               	movf	??_read_ADC,w
   661  0617  1283               	bcf	3,5	;RP0=0, select bank0
   662  0618  1303               	bcf	3,6	;RP1=0, select bank0
   663  0619  059F               	andwf	31,f	;volatile
   664                           
   665                           ;mainTrainControl.c: 253:     ADCON0 |= (channel & 0x07) << 3;
   666  061A  0874               	movf	read_ADC@channel,w
   667  061B  3907               	andlw	7
   668  061C  00F2               	movwf	??_read_ADC
   669  061D  3002               	movlw	2
   670  061E                     u355:
   671  061E  1003               	clrc
   672  061F  0DF2               	rlf	??_read_ADC,f
   673  0620  3EFF               	addlw	-1
   674  0621  1D03               	skipz
   675  0622  2E1E               	goto	u355
   676  0623  1003               	clrc
   677  0624  0D72               	rlf	??_read_ADC,w
   678  0625  00F3               	movwf	??_read_ADC+1
   679  0626  0873               	movf	??_read_ADC+1,w
   680  0627  049F               	iorwf	31,f	;volatile
   681  0628                     l1002:
   682                           
   683                           ;mainTrainControl.c: 254:     _delay((unsigned long)((10)*(8000000/4000000.0)));
   684  0628  3006               	movlw	6
   685  0629  00F2               	movwf	??_read_ADC
   686  062A                     u387:
   687  062A  0BF2               	decfsz	??_read_ADC,f
   688  062B  2E2A               	goto	u387
   689  062C  0000               	nop
   690  062D                     l1004:
   691                           
   692                           ;mainTrainControl.c: 255:     ADCON0 |= 0x04;
   693  062D  1283               	bcf	3,5	;RP0=0, select bank0
   694  062E  1303               	bcf	3,6	;RP1=0, select bank0
   695  062F  151F               	bsf	31,2	;volatile
   696  0630                     l121:	
   697                           ;mainTrainControl.c: 257:     }
   698                           
   699                           
   700                           ;mainTrainControl.c: 256:     while(ADCON0 & 0x04){
   701  0630  191F               	btfsc	31,2	;volatile
   702  0631  2E33               	goto	u361
   703  0632  2E34               	goto	u360
   704  0633                     u361:
   705  0633  2E30               	goto	l121
   706  0634                     u360:
   707  0634                     l1006:
   708                           
   709                           ;mainTrainControl.c: 258:     return ADRESL | (ADRESH <<8 );
   710  0634  081E               	movf	30,w	;volatile
   711  0635  00F1               	movwf	?_read_ADC+1
   712  0636  1683               	bsf	3,5	;RP0=1, select bank1
   713  0637  1303               	bcf	3,6	;RP1=0, select bank1
   714  0638  081E               	movf	30,w	;volatile
   715  0639  00F0               	movwf	?_read_ADC
   716  063A                     l124:
   717  063A  0008               	return
   718  063B                     __end_of_read_ADC:
   719                           
   720                           	psect	text3
   721  05C3                     __ptext3:	
   722 ;; *************** function _init_ADC *****************
   723 ;; Defined at:
   724 ;;		line 243 in file "mainTrainControl.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   738 ;;      Params:         0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0
   740 ;;      Temps:          1       0       0       0       0
   741 ;;      Totals:         1       0       0       0       0
   742 ;;Total ram usage:        1 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; This function calls:
   745 ;;		Nothing
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _init_ADC
   753  05C3                     _init_ADC:
   754  05C3                     l990:	
   755                           ;incstack = 0
   756                           ; Regs used in _init_ADC: [wreg]
   757                           
   758                           
   759                           ;mainTrainControl.c: 245:     ADCON0 = 0x01;
   760  05C3  3001               	movlw	1
   761  05C4  1283               	bcf	3,5	;RP0=0, select bank0
   762  05C5  1303               	bcf	3,6	;RP1=0, select bank0
   763  05C6  009F               	movwf	31	;volatile
   764                           
   765                           ;mainTrainControl.c: 246:     ADCON1 = 0x8E;
   766  05C7  308E               	movlw	142
   767  05C8  1683               	bsf	3,5	;RP0=1, select bank1
   768  05C9  1303               	bcf	3,6	;RP1=0, select bank1
   769  05CA  009F               	movwf	31	;volatile
   770                           
   771                           ;mainTrainControl.c: 247:     _delay((unsigned long)((20)*(8000000/4000000.0)));
   772  05CB  300D               	movlw	13
   773  05CC  00F0               	movwf	??_init_ADC
   774  05CD                     u397:
   775  05CD  0BF0               	decfsz	??_init_ADC,f
   776  05CE  2DCD               	goto	u397
   777  05CF                     l118:
   778  05CF  0008               	return
   779  05D0                     __end_of_init_ADC:
   780                           
   781                           	psect	text4
   782  0668                     __ptext4:	
   783 ;; *************** function _initSerial *****************
   784 ;; Defined at:
   785 ;;		line 166 in file "mainTrainControl.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;  baudRate        4    6[BANK0 ] unsigned long 
   788 ;; Auto vars:     Size  Location     Type
   789 ;;		None
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, status,2, status,0, pclath, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   799 ;;      Params:         0       4       0       0       0
   800 ;;      Locals:         0       0       0       0       0
   801 ;;      Temps:          4       0       0       0       0
   802 ;;      Totals:         4       4       0       0       0
   803 ;;Total ram usage:        8 bytes
   804 ;; Hardware stack levels used: 1
   805 ;; Hardware stack levels required when called: 1
   806 ;; This function calls:
   807 ;;		___aldiv
   808 ;; This function is called by:
   809 ;;		_main
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           
   814                           ;psect for function _initSerial
   815  0668                     _initSerial:
   816  0668                     l972:	
   817                           ;incstack = 0
   818                           ; Regs used in _initSerial: [wreg+status,2+status,0+pclath+cstack]
   819                           
   820                           
   821                           ;mainTrainControl.c: 166: void initSerial(unsigned long int baudRate);mainTrainControl.c
      +                          : 167: {;mainTrainControl.c: 168:  TRISC &= ~0x40;
   822  0668  30BF               	movlw	191
   823  0669  00F9               	movwf	??_initSerial
   824  066A  0879               	movf	??_initSerial,w
   825  066B  1683               	bsf	3,5	;RP0=1, select bank1
   826  066C  1303               	bcf	3,6	;RP1=0, select bank1
   827  066D  0587               	andwf	7,f	;volatile
   828  066E                     l974:
   829                           
   830                           ;mainTrainControl.c: 169:  TRISC |= 0x80;
   831  066E  1787               	bsf	7,7	;volatile
   832  066F                     l976:
   833                           
   834                           ;mainTrainControl.c: 171:  TXSTA = 0x20;
   835  066F  3020               	movlw	32
   836  0670  0098               	movwf	24	;volatile
   837  0671                     l978:
   838                           
   839                           ;mainTrainControl.c: 173:  RCSTA = 0x90;
   840  0671  3090               	movlw	144
   841  0672  1283               	bcf	3,5	;RP0=0, select bank0
   842  0673  1303               	bcf	3,6	;RP1=0, select bank0
   843  0674  0098               	movwf	24	;volatile
   844  0675                     l980:
   845                           
   846                           ;mainTrainControl.c: 175:  INTCON |= 0x80;
   847  0675  178B               	bsf	11,7	;volatile
   848  0676                     l982:
   849                           
   850                           ;mainTrainControl.c: 176:  INTCON |= 0x40;
   851  0676  170B               	bsf	11,6	;volatile
   852  0677                     l984:
   853                           
   854                           ;mainTrainControl.c: 177:  PIE1 |= 0x20;
   855  0677  1683               	bsf	3,5	;RP0=1, select bank1
   856  0678  1303               	bcf	3,6	;RP1=0, select bank1
   857  0679  168C               	bsf	12,5	;volatile
   858  067A                     l986:
   859                           
   860                           ;mainTrainControl.c: 179:  received = 0;
   861  067A  1283               	bcf	3,5	;RP0=0, select bank0
   862  067B  1303               	bcf	3,6	;RP1=0, select bank0
   863  067C  01BC               	clrf	_received
   864  067D                     l988:
   865                           
   866                           ;mainTrainControl.c: 181:  SPBRG = (char) (8000000/(long) (64UL*baudRate)) - 1;
   867  067D  0836               	movf	initSerial@baudRate,w
   868  067E  00F9               	movwf	??_initSerial
   869  067F  0837               	movf	initSerial@baudRate+1,w
   870  0680  00FA               	movwf	??_initSerial+1
   871  0681  0838               	movf	initSerial@baudRate+2,w
   872  0682  00FB               	movwf	??_initSerial+2
   873  0683  0839               	movf	initSerial@baudRate+3,w
   874  0684  00FC               	movwf	??_initSerial+3
   875  0685  3006               	movlw	6
   876  0686                     u335:
   877  0686  1003               	clrc
   878  0687  0DF9               	rlf	??_initSerial,f
   879  0688  0DFA               	rlf	??_initSerial+1,f
   880  0689  0DFB               	rlf	??_initSerial+2,f
   881  068A  0DFC               	rlf	??_initSerial+3,f
   882  068B                     u330:
   883  068B  3EFF               	addlw	-1
   884  068C  1D03               	skipz
   885  068D  2E86               	goto	u335
   886  068E  087C               	movf	??_initSerial+3,w
   887  068F  00F3               	movwf	___aldiv@divisor+3
   888  0690  087B               	movf	??_initSerial+2,w
   889  0691  00F2               	movwf	___aldiv@divisor+2
   890  0692  087A               	movf	??_initSerial+1,w
   891  0693  00F1               	movwf	___aldiv@divisor+1
   892  0694  0879               	movf	??_initSerial,w
   893  0695  00F0               	movwf	___aldiv@divisor
   894  0696  3000               	movlw	0
   895  0697  00F7               	movwf	___aldiv@dividend+3
   896  0698  307A               	movlw	122
   897  0699  00F6               	movwf	___aldiv@dividend+2
   898  069A  3012               	movlw	18
   899  069B  00F5               	movwf	___aldiv@dividend+1
   900  069C  3000               	movlw	0
   901  069D  00F4               	movwf	___aldiv@dividend
   902  069E  120A  118A  274E  120A  118A  	fcall	___aldiv
   903  06A3  0870               	movf	?___aldiv,w
   904  06A4  3EFF               	addlw	255
   905  06A5  1683               	bsf	3,5	;RP0=1, select bank1
   906  06A6  1303               	bcf	3,6	;RP1=0, select bank1
   907  06A7  0099               	movwf	25	;volatile
   908  06A8                     l96:
   909  06A8  0008               	return
   910  06A9                     __end_of_initSerial:
   911                           
   912                           	psect	text5
   913  074E                     __ptext5:	
   914 ;; *************** function ___aldiv *****************
   915 ;; Defined at:
   916 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  divisor         4    0[COMMON] long 
   919 ;;  dividend        4    4[COMMON] long 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  quotient        4    2[BANK0 ] long 
   922 ;;  sign            1    1[BANK0 ] unsigned char 
   923 ;;  counter         1    0[BANK0 ] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  4    0[COMMON] long 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   933 ;;      Params:         8       0       0       0       0
   934 ;;      Locals:         0       6       0       0       0
   935 ;;      Temps:          1       0       0       0       0
   936 ;;      Totals:         9       6       0       0       0
   937 ;;Total ram usage:       15 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_initSerial
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           
   947                           ;psect for function ___aldiv
   948  074E                     ___aldiv:
   949  074E                     l904:	
   950                           ;incstack = 0
   951                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   952                           
   953  074E  1283               	bcf	3,5	;RP0=0, select bank0
   954  074F  1303               	bcf	3,6	;RP1=0, select bank0
   955  0750  01B1               	clrf	___aldiv@sign
   956  0751                     l906:
   957  0751  1FF3               	btfss	___aldiv@divisor+3,7
   958  0752  2F54               	goto	u231
   959  0753  2F55               	goto	u230
   960  0754                     u231:
   961  0754  2F62               	goto	l275
   962  0755                     u230:
   963  0755                     l908:
   964  0755  09F0               	comf	___aldiv@divisor,f
   965  0756  09F1               	comf	___aldiv@divisor+1,f
   966  0757  09F2               	comf	___aldiv@divisor+2,f
   967  0758  09F3               	comf	___aldiv@divisor+3,f
   968  0759  0AF0               	incf	___aldiv@divisor,f
   969  075A  1903               	skipnz
   970  075B  0AF1               	incf	___aldiv@divisor+1,f
   971  075C  1903               	skipnz
   972  075D  0AF2               	incf	___aldiv@divisor+2,f
   973  075E  1903               	skipnz
   974  075F  0AF3               	incf	___aldiv@divisor+3,f
   975  0760  01B1               	clrf	___aldiv@sign
   976  0761  0AB1               	incf	___aldiv@sign,f
   977  0762                     l275:
   978  0762  1FF7               	btfss	___aldiv@dividend+3,7
   979  0763  2F65               	goto	u241
   980  0764  2F66               	goto	u240
   981  0765                     u241:
   982  0765  2F75               	goto	l914
   983  0766                     u240:
   984  0766                     l910:
   985  0766  09F4               	comf	___aldiv@dividend,f
   986  0767  09F5               	comf	___aldiv@dividend+1,f
   987  0768  09F6               	comf	___aldiv@dividend+2,f
   988  0769  09F7               	comf	___aldiv@dividend+3,f
   989  076A  0AF4               	incf	___aldiv@dividend,f
   990  076B  1903               	skipnz
   991  076C  0AF5               	incf	___aldiv@dividend+1,f
   992  076D  1903               	skipnz
   993  076E  0AF6               	incf	___aldiv@dividend+2,f
   994  076F  1903               	skipnz
   995  0770  0AF7               	incf	___aldiv@dividend+3,f
   996  0771                     l912:
   997  0771  3001               	movlw	1
   998  0772  00F8               	movwf	??___aldiv
   999  0773  0878               	movf	??___aldiv,w
  1000  0774  06B1               	xorwf	___aldiv@sign,f
  1001  0775                     l914:
  1002  0775  3000               	movlw	0
  1003  0776  00B5               	movwf	___aldiv@quotient+3
  1004  0777  3000               	movlw	0
  1005  0778  00B4               	movwf	___aldiv@quotient+2
  1006  0779  3000               	movlw	0
  1007  077A  00B3               	movwf	___aldiv@quotient+1
  1008  077B  3000               	movlw	0
  1009  077C  00B2               	movwf	___aldiv@quotient
  1010  077D                     l916:
  1011  077D  0873               	movf	___aldiv@divisor+3,w
  1012  077E  0472               	iorwf	___aldiv@divisor+2,w
  1013  077F  0471               	iorwf	___aldiv@divisor+1,w
  1014  0780  0470               	iorwf	___aldiv@divisor,w
  1015  0781  1903               	skipnz
  1016  0782  2F84               	goto	u251
  1017  0783  2F85               	goto	u250
  1018  0784                     u251:
  1019  0784  2FD2               	goto	l936
  1020  0785                     u250:
  1021  0785                     l918:
  1022  0785  01B0               	clrf	___aldiv@counter
  1023  0786  0AB0               	incf	___aldiv@counter,f
  1024  0787  2F95               	goto	l922
  1025  0788                     l920:
  1026  0788  3001               	movlw	1
  1027  0789  00F8               	movwf	??___aldiv
  1028  078A                     u265:
  1029  078A  1003               	clrc
  1030  078B  0DF0               	rlf	___aldiv@divisor,f
  1031  078C  0DF1               	rlf	___aldiv@divisor+1,f
  1032  078D  0DF2               	rlf	___aldiv@divisor+2,f
  1033  078E  0DF3               	rlf	___aldiv@divisor+3,f
  1034  078F  0BF8               	decfsz	??___aldiv,f
  1035  0790  2F8A               	goto	u265
  1036  0791  3001               	movlw	1
  1037  0792  00F8               	movwf	??___aldiv
  1038  0793  0878               	movf	??___aldiv,w
  1039  0794  07B0               	addwf	___aldiv@counter,f
  1040  0795                     l922:
  1041  0795  1FF3               	btfss	___aldiv@divisor+3,7
  1042  0796  2F98               	goto	u271
  1043  0797  2F99               	goto	u270
  1044  0798                     u271:
  1045  0798  2F88               	goto	l920
  1046  0799                     u270:
  1047  0799                     l924:
  1048  0799  3001               	movlw	1
  1049  079A  00F8               	movwf	??___aldiv
  1050  079B                     u285:
  1051  079B  1003               	clrc
  1052  079C  0DB2               	rlf	___aldiv@quotient,f
  1053  079D  0DB3               	rlf	___aldiv@quotient+1,f
  1054  079E  0DB4               	rlf	___aldiv@quotient+2,f
  1055  079F  0DB5               	rlf	___aldiv@quotient+3,f
  1056  07A0  0BF8               	decfsz	??___aldiv,f
  1057  07A1  2F9B               	goto	u285
  1058  07A2                     l926:
  1059  07A2  0873               	movf	___aldiv@divisor+3,w
  1060  07A3  0277               	subwf	___aldiv@dividend+3,w
  1061  07A4  1D03               	skipz
  1062  07A5  2FB0               	goto	u295
  1063  07A6  0872               	movf	___aldiv@divisor+2,w
  1064  07A7  0276               	subwf	___aldiv@dividend+2,w
  1065  07A8  1D03               	skipz
  1066  07A9  2FB0               	goto	u295
  1067  07AA  0871               	movf	___aldiv@divisor+1,w
  1068  07AB  0275               	subwf	___aldiv@dividend+1,w
  1069  07AC  1D03               	skipz
  1070  07AD  2FB0               	goto	u295
  1071  07AE  0870               	movf	___aldiv@divisor,w
  1072  07AF  0274               	subwf	___aldiv@dividend,w
  1073  07B0                     u295:
  1074  07B0  1C03               	skipc
  1075  07B1  2FB3               	goto	u291
  1076  07B2  2FB4               	goto	u290
  1077  07B3                     u291:
  1078  07B3  2FC3               	goto	l932
  1079  07B4                     u290:
  1080  07B4                     l928:
  1081  07B4  0870               	movf	___aldiv@divisor,w
  1082  07B5  02F4               	subwf	___aldiv@dividend,f
  1083  07B6  0871               	movf	___aldiv@divisor+1,w
  1084  07B7  1C03               	skipc
  1085  07B8  0F71               	incfsz	___aldiv@divisor+1,w
  1086  07B9  02F5               	subwf	___aldiv@dividend+1,f
  1087  07BA  0872               	movf	___aldiv@divisor+2,w
  1088  07BB  1C03               	skipc
  1089  07BC  0F72               	incfsz	___aldiv@divisor+2,w
  1090  07BD  02F6               	subwf	___aldiv@dividend+2,f
  1091  07BE  0873               	movf	___aldiv@divisor+3,w
  1092  07BF  1C03               	skipc
  1093  07C0  0F73               	incfsz	___aldiv@divisor+3,w
  1094  07C1  02F7               	subwf	___aldiv@dividend+3,f
  1095  07C2                     l930:
  1096  07C2  1432               	bsf	___aldiv@quotient,0
  1097  07C3                     l932:
  1098  07C3  3001               	movlw	1
  1099  07C4                     u305:
  1100  07C4  1003               	clrc
  1101  07C5  0CF3               	rrf	___aldiv@divisor+3,f
  1102  07C6  0CF2               	rrf	___aldiv@divisor+2,f
  1103  07C7  0CF1               	rrf	___aldiv@divisor+1,f
  1104  07C8  0CF0               	rrf	___aldiv@divisor,f
  1105  07C9  3EFF               	addlw	-1
  1106  07CA  1D03               	skipz
  1107  07CB  2FC4               	goto	u305
  1108  07CC                     l934:
  1109  07CC  3001               	movlw	1
  1110  07CD  02B0               	subwf	___aldiv@counter,f
  1111  07CE  1D03               	btfss	3,2
  1112  07CF  2FD1               	goto	u311
  1113  07D0  2FD2               	goto	u310
  1114  07D1                     u311:
  1115  07D1  2F99               	goto	l924
  1116  07D2                     u310:
  1117  07D2                     l936:
  1118  07D2  0831               	movf	___aldiv@sign,w
  1119  07D3  1903               	btfsc	3,2
  1120  07D4  2FD6               	goto	u321
  1121  07D5  2FD7               	goto	u320
  1122  07D6                     u321:
  1123  07D6  2FE2               	goto	l940
  1124  07D7                     u320:
  1125  07D7                     l938:
  1126  07D7  09B2               	comf	___aldiv@quotient,f
  1127  07D8  09B3               	comf	___aldiv@quotient+1,f
  1128  07D9  09B4               	comf	___aldiv@quotient+2,f
  1129  07DA  09B5               	comf	___aldiv@quotient+3,f
  1130  07DB  0AB2               	incf	___aldiv@quotient,f
  1131  07DC  1903               	skipnz
  1132  07DD  0AB3               	incf	___aldiv@quotient+1,f
  1133  07DE  1903               	skipnz
  1134  07DF  0AB4               	incf	___aldiv@quotient+2,f
  1135  07E0  1903               	skipnz
  1136  07E1  0AB5               	incf	___aldiv@quotient+3,f
  1137  07E2                     l940:
  1138  07E2  0835               	movf	___aldiv@quotient+3,w
  1139  07E3  00F3               	movwf	?___aldiv+3
  1140  07E4  0834               	movf	___aldiv@quotient+2,w
  1141  07E5  00F2               	movwf	?___aldiv+2
  1142  07E6  0833               	movf	___aldiv@quotient+1,w
  1143  07E7  00F1               	movwf	?___aldiv+1
  1144  07E8  0832               	movf	___aldiv@quotient,w
  1145  07E9  00F0               	movwf	?___aldiv
  1146  07EA                     l285:
  1147  07EA  0008               	return
  1148  07EB                     __end_of___aldiv:
  1149                           
  1150                           	psect	text6
  1151  06EE                     __ptext6:	
  1152 ;; *************** function _LCDInit *****************
  1153 ;; Defined at:
  1154 ;;		line 129 in file "mainTrainControl.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1168 ;;      Params:         0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0
  1170 ;;      Temps:          2       0       0       0       0
  1171 ;;      Totals:         2       0       0       0       0
  1172 ;;Total ram usage:        2 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 1
  1175 ;; This function calls:
  1176 ;;		_LCDData
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _LCDInit
  1184  06EE                     _LCDInit:
  1185  06EE                     l944:	
  1186                           ;incstack = 0
  1187                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  1188                           
  1189                           
  1190                           ;mainTrainControl.c: 131:    TRISE = 0;
  1191  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  1192  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  1193  06F0  0189               	clrf	9	;volatile
  1194                           
  1195                           ;mainTrainControl.c: 132:    TRISD = 0;
  1196  06F1  0188               	clrf	8	;volatile
  1197  06F2                     l946:
  1198                           
  1199                           ;mainTrainControl.c: 133:    PORTE = ~0X06;
  1200  06F2  30F9               	movlw	249
  1201  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  1202  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  1203  06F5  0089               	movwf	9	;volatile
  1204  06F6                     l948:
  1205                           
  1206                           ;mainTrainControl.c: 134:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1207  06F6  3034               	movlw	52
  1208  06F7  00F5               	movwf	??_LCDInit+1
  1209  06F8  30F1               	movlw	241
  1210  06F9  00F4               	movwf	??_LCDInit
  1211  06FA                     u407:
  1212  06FA  0BF4               	decfsz	??_LCDInit,f
  1213  06FB  2EFA               	goto	u407
  1214  06FC  0BF5               	decfsz	??_LCDInit+1,f
  1215  06FD  2EFA               	goto	u407
  1216  06FE  2EFF               	nop2
  1217  06FF                     l950:
  1218                           
  1219                           ;mainTrainControl.c: 135:    PORTE = 0x02;
  1220  06FF  3002               	movlw	2
  1221  0700  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0701  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0702  0089               	movwf	9	;volatile
  1224  0703                     l952:
  1225                           
  1226                           ;mainTrainControl.c: 136:    LCDData(0X38, 0);
  1227  0703  01F0               	clrf	LCDData@mode
  1228  0704  3038               	movlw	56
  1229  0705  120A  118A  263B  120A  118A  	fcall	_LCDData
  1230  070A                     l954:
  1231                           
  1232                           ;mainTrainControl.c: 137:    _delay((unsigned long)((5)*(8000000/4000.0)));
  1233  070A  300D               	movlw	13
  1234  070B  00F5               	movwf	??_LCDInit+1
  1235  070C  30FB               	movlw	251
  1236  070D  00F4               	movwf	??_LCDInit
  1237  070E                     u417:
  1238  070E  0BF4               	decfsz	??_LCDInit,f
  1239  070F  2F0E               	goto	u417
  1240  0710  0BF5               	decfsz	??_LCDInit+1,f
  1241  0711  2F0E               	goto	u417
  1242  0712  2F13               	nop2
  1243  0713                     l956:
  1244                           
  1245                           ;mainTrainControl.c: 138:    LCDData(0X38, 0);
  1246  0713  01F0               	clrf	LCDData@mode
  1247  0714  3038               	movlw	56
  1248  0715  120A  118A  263B  120A  118A  	fcall	_LCDData
  1249  071A                     l958:
  1250                           
  1251                           ;mainTrainControl.c: 139:    _delay((unsigned long)((1)*(8000000/4000.0)));
  1252  071A  3003               	movlw	3
  1253  071B  00F5               	movwf	??_LCDInit+1
  1254  071C  3097               	movlw	151
  1255  071D  00F4               	movwf	??_LCDInit
  1256  071E                     u427:
  1257  071E  0BF4               	decfsz	??_LCDInit,f
  1258  071F  2F1E               	goto	u427
  1259  0720  0BF5               	decfsz	??_LCDInit+1,f
  1260  0721  2F1E               	goto	u427
  1261  0722  2F23               	nop2
  1262  0723                     l960:
  1263                           
  1264                           ;mainTrainControl.c: 140:    LCDData(0X38, 0);
  1265  0723  01F0               	clrf	LCDData@mode
  1266  0724  3038               	movlw	56
  1267  0725  120A  118A  263B  120A  118A  	fcall	_LCDData
  1268  072A                     l962:
  1269                           
  1270                           ;mainTrainControl.c: 141:    LCDData(0X08, 0);
  1271  072A  01F0               	clrf	LCDData@mode
  1272  072B  3008               	movlw	8
  1273  072C  120A  118A  263B  120A  118A  	fcall	_LCDData
  1274  0731                     l964:
  1275                           
  1276                           ;mainTrainControl.c: 142:    LCDData(0X0F, 0);
  1277  0731  01F0               	clrf	LCDData@mode
  1278  0732  300F               	movlw	15
  1279  0733  120A  118A  263B  120A  118A  	fcall	_LCDData
  1280  0738                     l966:
  1281                           
  1282                           ;mainTrainControl.c: 143:    LCDData(0X01, 0);
  1283  0738  01F0               	clrf	LCDData@mode
  1284  0739  3001               	movlw	1
  1285  073A  120A  118A  263B  120A  118A  	fcall	_LCDData
  1286  073F                     l968:
  1287                           
  1288                           ;mainTrainControl.c: 144:    LCDData(0X0E, 0);
  1289  073F  01F0               	clrf	LCDData@mode
  1290  0740  300E               	movlw	14
  1291  0741  120A  118A  263B  120A  118A  	fcall	_LCDData
  1292  0746                     l970:
  1293                           
  1294                           ;mainTrainControl.c: 145:    LCDData(0X80, 0);
  1295  0746  01F0               	clrf	LCDData@mode
  1296  0747  3080               	movlw	128
  1297  0748  120A  118A  263B  120A  118A  	fcall	_LCDData
  1298  074D                     l88:
  1299  074D  0008               	return
  1300  074E                     __end_of_LCDInit:
  1301                           
  1302                           	psect	text7
  1303  063B                     __ptext7:	
  1304 ;; *************** function _LCDData *****************
  1305 ;; Defined at:
  1306 ;;		line 148 in file "mainTrainControl.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  data            1    wreg     unsigned char 
  1309 ;;  mode            1    0[COMMON] unsigned char 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  data            1    3[COMMON] unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         1       0       0       0       0
  1322 ;;      Locals:         1       0       0       0       0
  1323 ;;      Temps:          2       0       0       0       0
  1324 ;;      Totals:         4       0       0       0       0
  1325 ;;Total ram usage:        4 bytes
  1326 ;; Hardware stack levels used: 1
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_LCDInit
  1331 ;;		_sendLCDString
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _LCDData
  1337  063B                     _LCDData:
  1338                           
  1339                           ;incstack = 0
  1340                           ; Regs used in _LCDData: [wreg+status,2+status,0]
  1341                           ;LCDData@data stored from wreg
  1342  063B  00F3               	movwf	LCDData@data
  1343  063C                     l888:
  1344                           
  1345                           ;mainTrainControl.c: 148: void LCDData(char data, char mode);mainTrainControl.c: 149: {;
      +                          mainTrainControl.c: 150:         PORTE |= 0x02;
  1346  063C  1283               	bcf	3,5	;RP0=0, select bank0
  1347  063D  1303               	bcf	3,6	;RP1=0, select bank0
  1348  063E  1489               	bsf	9,1	;volatile
  1349  063F                     l890:
  1350                           
  1351                           ;mainTrainControl.c: 151:         PORTD = data;
  1352  063F  0873               	movf	LCDData@data,w
  1353  0640  0088               	movwf	8	;volatile
  1354  0641                     l892:
  1355                           
  1356                           ;mainTrainControl.c: 152:         if(mode)
  1357  0641  0870               	movf	LCDData@mode,w
  1358  0642  1903               	btfsc	3,2
  1359  0643  2E45               	goto	u221
  1360  0644  2E46               	goto	u220
  1361  0645                     u221:
  1362  0645  2E48               	goto	l896
  1363  0646                     u220:
  1364  0646                     l894:
  1365                           
  1366                           ;mainTrainControl.c: 153:         {;mainTrainControl.c: 154:             PORTE |= 0x04;
  1367  0646  1509               	bsf	9,2	;volatile
  1368                           
  1369                           ;mainTrainControl.c: 155:         }
  1370  0647  2E4C               	goto	l898
  1371  0648                     l896:
  1372                           
  1373                           ;mainTrainControl.c: 157:         {;mainTrainControl.c: 158:             PORTE &= ~0x04;
  1374  0648  30FB               	movlw	251
  1375  0649  00F1               	movwf	??_LCDData
  1376  064A  0871               	movf	??_LCDData,w
  1377  064B  0589               	andwf	9,f	;volatile
  1378  064C                     l898:
  1379                           
  1380                           ;mainTrainControl.c: 160:         _delay((unsigned long)((3)*(8000000/4000.0)));
  1381  064C  3008               	movlw	8
  1382  064D  00F2               	movwf	??_LCDData+1
  1383  064E  30C9               	movlw	201
  1384  064F  00F1               	movwf	??_LCDData
  1385  0650                     u437:
  1386  0650  0BF1               	decfsz	??_LCDData,f
  1387  0651  2E50               	goto	u437
  1388  0652  0BF2               	decfsz	??_LCDData+1,f
  1389  0653  2E50               	goto	u437
  1390  0654  2E55               	nop2
  1391  0655                     l900:
  1392                           
  1393                           ;mainTrainControl.c: 161:         PORTE &= ~0x02;
  1394  0655  30FD               	movlw	253
  1395  0656  00F1               	movwf	??_LCDData
  1396  0657  0871               	movf	??_LCDData,w
  1397  0658  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0659  1303               	bcf	3,6	;RP1=0, select bank0
  1399  065A  0589               	andwf	9,f	;volatile
  1400                           
  1401                           ;mainTrainControl.c: 162:         _delay((unsigned long)((3)*(8000000/4000.0)));
  1402  065B  3008               	movlw	8
  1403  065C  00F2               	movwf	??_LCDData+1
  1404  065D  30C9               	movlw	201
  1405  065E  00F1               	movwf	??_LCDData
  1406  065F                     u447:
  1407  065F  0BF1               	decfsz	??_LCDData,f
  1408  0660  2E5F               	goto	u447
  1409  0661  0BF2               	decfsz	??_LCDData+1,f
  1410  0662  2E5F               	goto	u447
  1411  0663  2E64               	nop2
  1412  0664                     l902:
  1413                           
  1414                           ;mainTrainControl.c: 163:         PORTE |= 0x02;
  1415  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1416  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1417  0666  1489               	bsf	9,1	;volatile
  1418  0667                     l93:
  1419  0667  0008               	return
  1420  0668                     __end_of_LCDData:
  1421  007E                     btemp	set	126	;btemp
  1422  007E                     wtemp0	set	126
  1423                           
  1424                           	psect	config
  1425                           
  1426                           ;Config register CONFIG @ 0x2007
  1427                           ;	Oscillator Selection bits
  1428                           ;	FOSC = HS, HS oscillator
  1429                           ;	Watchdog Timer Enable bit
  1430                           ;	WDTE = OFF, WDT disabled
  1431                           ;	Power-up Timer Enable bit
  1432                           ;	PWRTE = ON, PWRT enabled
  1433                           ;	Brown-out Reset Enable bit
  1434                           ;	BOREN = ON, BOR enabled
  1435                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1436                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1437                           ;	Data EEPROM Memory Code Protection bit
  1438                           ;	CPD = OFF, Data EEPROM code protection off
  1439                           ;	Flash Program Memory Write Enable bits
  1440                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1441                           ;	In-Circuit Debugger Mode bit
  1442                           ;	DEBUG = 0x1, unprogrammed default
  1443                           ;	Flash Program Memory Code Protection bit
  1444                           ;	CP = OFF, Code protection off
  1445  2007                     	org	8199
  1446  2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     12      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sendLCDString@string	PTR unsigned char  size(1) Largest target is 12
		 -> dataLCD(BANK0[12]), 


Critical Paths under _main in COMMON

    _main->_initSerial
    _sendLCDString->_LCDData
    _initSerial->___aldiv
    _LCDInit->_LCDData

Critical Paths under _main in BANK0

    _main->_initSerial
    _initSerial->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2151
                                             10 BANK0      2     2      0
                            _LCDInit
                         _initSerial
                           _init_ADC
                           _read_ADC
                      _sendLCDString
 ---------------------------------------------------------------------------------
 (1) _sendLCDString                                        3     3      0     851
                                              4 COMMON     3     3      0
                            _LCDData
 ---------------------------------------------------------------------------------
 (1) _read_ADC                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           8     4      4     550
                                              9 COMMON     4     4      0
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0     728
                                              4 COMMON     2     2      0
                            _LCDData
 ---------------------------------------------------------------------------------
 (2) _LCDData                                              4     3      1     728
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDInit
     _LCDData
   _initSerial
     ___aldiv
   _init_ADC
   _read_ADC
   _sendLCDString
     _LCDData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C      12        0.0%
ABS                  0      0      2C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 15 15:34:06 2022

                      _c 007D                        pc 0002                       l93 0667  
                     l88 074D                       l96 06A8                       fsr 0004  
                    l121 0630                      l115 0612                      l124 063A  
                    l118 05CF                      l275 0762                      l285 07EA  
                    l900 0655                      l902 0664                      l910 0766  
                    l920 0788                      l912 0771                      l904 074E  
                    l930 07C2                      l922 0795                      l914 0775  
                    l906 0751                      l940 07E2                      l932 07C3  
                    l924 0799                      l916 077D                      l908 0755  
                    l950 06FF                      l934 07CC                      l926 07A2  
                    l918 0785                      l960 0723                      l952 0703  
                    l944 06EE                      l928 07B4                      l936 07D2  
                    l890 063F                      l970 0746                      l962 072A  
                    l954 070A                      l946 06F2                      l938 07D7  
                    l892 0641                      l964 0731                      l956 0713  
                    l948 06F6                      l980 0675                      l972 0668  
                    l894 0646                      l966 0738                      l958 071A  
                    l982 0676                      l974 066E                      l990 05C3  
                    l896 0648                      l888 063C                      l968 073F  
                    l984 0677                      l976 066F                      l992 05F4  
                    l898 064C                      l986 067A                      l978 0671  
                    l994 05F6                      l988 067D                      l996 0603  
                    l998 0607                      u220 0646                      u221 0645  
                    u310 07D2                      u230 0755                      u311 07D1  
                    u231 0754                      u320 07D7                      u240 0766  
                    u321 07D6                      u305 07C4                      u241 0765  
                    u250 0785                      u330 068B                      u251 0784  
                    u340 0612                      u341 0611                      u270 0799  
                    u407 06FA                      u271 0798                      u335 0686  
                    u360 0634                      u417 070E                      u265 078A  
                    u361 0633                      u290 07B4                      u370 06CB  
                    u427 071E                      u291 07B3                      u355 061E  
                    u371 06CA                      u437 0650                      u285 079B  
                    u447 065F                      u295 07B0                      u387 062A  
                    u397 05CD                      _pos 003D                      fsr0 0004  
                    indf 0000          __end_of_LCDData 0668          __end_of_LCDInit 074E  
                   l1000 0614                     l1002 0628                     l1010 06A9  
                   l1004 062D                     l1020 06D3                     l1012 06C2  
                   l1006 0634                     l1022 06D6                     l1014 06C6  
                   l1016 06CB                     l1018 06D1                     _PIE1 008C  
                   _PIR1 000C                     _data 0023                     _main 06A9  
                   btemp 007E                     start 0000          __end_of___aldiv 07EB  
                  ?_main 0070                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  _PORTE 0009                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019                    _TXSTA 0098                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07EB  
           __end_of_main 06EE                   ??_main 003A                ??_LCDData 0071  
              ??_LCDInit 0074                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _INTCON 000B  
              ??___aldiv 0078         __end_of_init_ADC 05D0         __end_of_read_ADC 063B  
         sendLCDString@i 0076  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 05D0               __pbssBANK0 003C   __size_of_sendLCDString 0020  
             __pmaintext 06A9                  _LCDData 063B                  _LCDInit 06EE  
              ?_init_ADC 0070                ?_read_ADC 0070                  ___aldiv 074E  
             _initSerial 0668                  _dataLCD 0024            _sendLCDString 05F3  
                __ptext1 05F3                  __ptext2 0613                  __ptext3 05C3  
                __ptext4 0668                  __ptext5 074E                  __ptext6 06EE  
                __ptext7 063B         ___aldiv@dividend 0074     end_of_initialization 07FC  
             ??_init_ADC 0070               ??_read_ADC 0072         ___aldiv@quotient 0032  
         _codiceSeriale0 0022           _codiceSeriale1 0021           _codiceSeriale2 0020  
         ?_sendLCDString 0070          read_ADC@channel 0074              ?_initSerial 0036  
    start_initialization 07EB               init_fetch0 05E0          ??_sendLCDString 0074  
            __pdataBANK0 0020       initSerial@baudRate 0036                 ?_LCDData 0070  
               ?_LCDInit 0070              __pbssCOMMON 007D                ___latbits 0002  
          __pcstackBANK0 0030      __size_of_initSerial 0041        __size_of_init_ADC 000D  
      __size_of_read_ADC 0028                 ?___aldiv 0070          ___aldiv@divisor 0070  
        ___aldiv@counter 0030         __size_of_LCDData 002D         __size_of_LCDInit 0060  
           ??_initSerial 0079         __size_of___aldiv 009D      sendLCDString@string 0075  
     __end_of_initSerial 06A9                 _init_ADC 05C3                 _read_ADC 0613  
          __size_of_main 0045                 _received 003C                 init_ram0 05E4  
  __end_of_sendLCDString 0613             ___aldiv@sign 0031              LCDData@data 0073  
            LCDData@mode 0070  
